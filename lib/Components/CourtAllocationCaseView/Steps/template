import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:get/get.dart';
import '../../../Constants/color_constant.dart';
import 'package:google_fonts/google_fonts.dart';
import '../Controller/main_controller.dart';
import '../Controller/personal_info_controller.dart';
import 'ZLandAcquisitionUIUtils.dart';

class PersonalInfoStep extends StatelessWidget {
  final int currentSubStep;
  final CourtAllocationCaseController mainController;

  const PersonalInfoStep({
    Key? key,
    required this.currentSubStep,
    required this.mainController,
  }) : super(key: key);

  // Get the PersonalInfoController
  PersonalInfoController get controller => Get.find<PersonalInfoController>(tag: 'personal_info');

  @override
  Widget build(BuildContext context) {
    // Get the substeps from main controller configuration
    final subSteps = mainController.stepConfigurations[0] ?? ['holder_verification'];

    // Ensure currentSubStep is within bounds
    if (currentSubStep >= subSteps.length) {
      return _buildLandAcquisitionDetails(); // Fallback
    }

    final currentField = subSteps[currentSubStep];

    switch (currentField) {
      case 'land_acquisition_details':
        return _buildLandAcquisitionDetails();
      default:
        return _buildLandAcquisitionDetails();
    }
  }

  Widget _buildLandAcquisitionDetails() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        CourtAllocationCaseUIUtils.buildStepHeader(
          'Land Acquisition Details',
          'Please provide land acquisition information',
        ),
        Gap(24.h),

        // Name of Land Acquisition Officer/Office
        CourtAllocationCaseUIUtils.buildTextFormField(
          controller: controller.landAcquisitionOfficerController,
          label: 'Name of Land Acquisition Officer/Office *',
          hint: 'Enter officer/office name',
          icon: PhosphorIcons.userCircle(PhosphorIconsStyle.regular),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Land Acquisition Officer name is required';
            }
            if (value.trim().length < 2) {
              return 'Name must be at least 3 characters';
            }
            return null;
          },
        ),
        Gap(16.h),

        // Name and address of Land Acquisition Board
        CourtAllocationCaseUIUtils.buildTextFormField(
          controller: controller.landAcquisitionBoardController,
          label: 'Name and address of Land Acquisition Board *',
          hint: 'Enter board name and address',
          icon: PhosphorIcons.buildings(PhosphorIconsStyle.regular),
          maxLines: 3,
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Land Acquisition Board details are required';
            }
            if (value.trim().length < 2) {
              return 'Details must be at least 5 characters';
            }
            return null;
          },
        ),
        Gap(16.h),

        // Land acquisition details
        CourtAllocationCaseUIUtils.buildTextFormField(
          controller: controller.landAcquisitionDetailsController,
          label: 'Land acquisition details *',
          hint: 'Enter detailed land acquisition information',
          icon: PhosphorIcons.info(PhosphorIconsStyle.regular),
          maxLines: 4,
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Land acquisition details are required';
            }
            if (value.trim().length < 2) {
              return 'Details must be at least 10 characters';
            }
            return null;
          },
        ),
        Gap(16.h),

        // Land Acquisition Order/Proposal Number
        CourtAllocationCaseUIUtils.buildTextFormField(
          controller: controller.landAcquisitionOrderNumberController,
          label: 'Land Acquisition Order/Proposal Number *',
          hint: 'Enter order/proposal number',
          icon: PhosphorIcons.hash(PhosphorIconsStyle.regular),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Order/Proposal number is required';
            }
            if (value.trim().length < 2) {
              return 'Number must be at least 3 characters';
            }
            return null;
          },
        ),
        Gap(16.h),

        // Date of Land Acquisition Order/Proposal
        CourtAllocationCaseUIUtils.buildDatePickerField(
          controller: controller.landAcquisitionOrderDateController,
          label: 'Date of Land Acquisition Order/Proposal *',
          hint: 'dd-mm-yyyy',
          icon: PhosphorIcons.calendar(PhosphorIconsStyle.regular),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Order/Proposal date is required';
            }
            return null;
          },
          onDateSelected: (DateTime selectedDate) {
            controller.updateLandAcquisitionOrderDate(selectedDate);
          },
        ),
        Gap(16.h),

        // Name and address of the office issuing the land acquisition order
        CourtAllocationCaseUIUtils.buildTextFormField(
          controller: controller.landAcquisitionOfficeAddressController,
          label:
              'Name and address of the office issuing the land acquisition order *',
          hint: 'Enter issuing office name and address',
          icon: PhosphorIcons.mapPin(PhosphorIconsStyle.regular),
          maxLines: 3,
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Issuing office details are required';
            }
            if (value.trim().length < 2) {
              return 'Details must be at least 2 characters';
            }
            return null;
          },
        ),
        Gap(16.h),

        // Upload Land Acquisition Order/Proposal
        ImagePickerUtil.buildFileUploadField(
          label: 'Upload Land Acquisition Order/Proposal *',
          hint: 'Upload order/proposal document',
          icon: PhosphorIcons.fileText(PhosphorIconsStyle.regular),
          uploadedFiles: controller.landAcquisitionOrderFiles,
          onFilesSelected: (files) =>
              controller.landAcquisitionOrderFiles.assignAll(files),
        ),
        Gap(16.h),

        // Proposed Land Acquisition Simankan Map
        ImagePickerUtil.buildFileUploadField(
          label: 'Proposed Land Acquisition Simankan Map *',
          hint: 'Upload simankan map',
          icon: PhosphorIcons.mapPin(PhosphorIconsStyle.regular),
          uploadedFiles: controller.landAcquisitionMapFiles,
          onFilesSelected: (files) =>
              controller.landAcquisitionMapFiles.assignAll(files),
        ),
        Gap(16.h),

        // KML File of proposed land acquisition scheme
        ImagePickerUtil.buildFileUploadField(
          label: 'KML File of proposed land acquisition scheme *',
          hint: 'Upload KML file',
          icon: PhosphorIcons.fileCode(PhosphorIconsStyle.regular),
          uploadedFiles: controller.kmlFiles,
          onFilesSelected: (files) => controller.kmlFiles.assignAll(files),
        ),
        Gap(32.h),

        // Obx(() => CourtAllocationCaseUIUtils.buildDropdownField(
        //       label: 'Department*',
        //       value: controller.selectedDepartment.value,
        //       items: controller.departmentOptions,
        //       onChanged: controller.updateDepartment,
        //       icon: PhosphorIcons.buildings(PhosphorIconsStyle.regular),
        //     )),

        CourtAllocationCaseUIUtils.buildNavigationButtons(mainController),
      ],
    );
  }
}
