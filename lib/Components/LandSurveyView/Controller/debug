  void debugPrintInfo() {
    developer.log('=== PERSONAL INFO DEBUG ===', name: 'DebugInfo');

    developer.log(
        'Is holder themselves: ${personalInfoController.isHolderThemselves.value}',
        name: 'PersonalInfo');
    developer.log(
        'Has authority on behalf: ${personalInfoController.hasAuthorityOnBehalf.value}',
        name: 'PersonalInfo');
    developer.log(
        'Has been counted before: ${personalInfoController.hasBeenCountedBefore.value}',
        name: 'PersonalInfo');
    developer.log(
        'POA registration number: "${personalInfoController.poaRegistrationNumberController.text.trim()}"',
        name: 'PersonalInfo');
    developer.log(
        'POA registration date: "${personalInfoController.poaRegistrationDateController.text.trim()}"',
        name: 'PersonalInfo');
    developer.log(
        'POA issuer name: "${personalInfoController.poaIssuerNameController.text.trim()}"',
        name: 'PersonalInfo');
    developer.log(
        'POA holder name: "${personalInfoController.poaHolderNameController.text.trim()}"',
        name: 'PersonalInfo');
    developer.log(
        'POA holder address: "${personalInfoController.poaHolderAddressController.text.trim()}"',
        name: 'PersonalInfo');

    developer.log('=== SURVEY INFO DATA DEBUG ===', name: 'DebugInfo');

    final surveyData = getSurveyInfoData();
    final surveyInfo = surveyData['survey_cts'] as Map<String, dynamic>?;

    if (surveyInfo != null) {
      developer.log('Survey Number: "${surveyInfo['survey_number']}"',
          name: 'SurveyInfo');
      developer.log('Department: "${surveyInfo['department']}"',
          name: 'SurveyInfo');
      developer.log('District: "${surveyInfo['district']}"',
          name: 'SurveyInfo');
      developer.log('Taluka: "${surveyInfo['taluka']}"', name: 'SurveyInfo');
      developer.log('Village: "${surveyInfo['village']}"', name: 'SurveyInfo');
      developer.log('Office: "${surveyInfo['office']}"', name: 'SurveyInfo');
    } else {
      developer.log('Survey info data is null',
          name: 'SurveyInfo', level: 900); // Warning level
    }

    developer.log('=== CALCULATION DATA DEBUG ===', name: 'DebugInfo');

    try {
      // Get calculation data using the fixed method
      final calculationData = getCalculationData();

      if (calculationData.isNotEmpty) {
        developer.log(
            'Calculation Type: "${calculationData['calculationType']}"',
            name: 'CalculationData');
        if (calculationData['orderNumber']?.toString().isNotEmpty ?? false) {
          developer.log('Order Number: "${calculationData['orderNumber']}"',
              name: 'CalculationData');
        }
        if (calculationData['orderDate']?.toString().isNotEmpty ?? false) {
          developer.log('Order Date: "${calculationData['orderDate']}"',
              name: 'CalculationData');
        }
        if (calculationData['schemeOrderNumber']?.toString().isNotEmpty ??
            false) {
          developer.log(
              'Scheme Order Number: "${calculationData['schemeOrderNumber']}"',
              name: 'CalculationData');
        }
        if (calculationData['appointmentDate']?.toString().isNotEmpty ??
            false) {
          developer.log(
              'Appointment Date: "${calculationData['appointmentDate']}"',
              name: 'CalculationData');
        }

        // Print type-specific fields based on calculation type
        String calcType = calculationData['calculationType']?.toString() ?? '';

        switch (calcType) {
          case 'Hddkayam':
            developer.log(
                'Hddkayam Entries Count: ${calculationData['hddkayamEntriesCount'] ?? 0}',
                name: 'Hddkayam');

            // Print detailed entries
            for (int i = 0;
                i < calculationController.hddkayamEntries.length;
                i++) {
              final entry = calculationController.hddkayamEntries[i];
              developer.log('Entry ${i + 1}:', name: 'HddkayamEntry');
              developer.log(
                  '  CT Survey Number: "${entry['ctSurveyNumber'] ?? ''}"',
                  name: 'HddkayamEntry');
              developer.log(
                  '  Selected CT Survey: "${entry['selectedCTSurvey'] ?? ''}"',
                  name: 'HddkayamEntry');
              developer.log('  Area: "${entry['area'] ?? ''}"',
                  name: 'HddkayamEntry');
              developer.log('  Area Sqm: "${entry['areaSqm'] ?? ''}"',
                  name: 'HddkayamEntry');
              developer.log('  Is Correct: ${entry['isCorrect'] ?? false}',
                  name: 'HddkayamEntry');
            }
            break;

          case 'Stomach':
            developer.log(
                'Stomach Entries Count: ${calculationData['stomachEntriesCount'] ?? 0}',
                name: 'Stomach');

            // Print detailed entries
            for (int i = 0;
                i < calculationController.stomachEntries.length;
                i++) {
              final entry = calculationController.stomachEntries[i];
              developer.log('Entry ${i + 1}:', name: 'StomachEntry');
              developer.log('  Survey Number: "${entry['surveyNumber'] ?? ''}"',
                  name: 'StomachEntry');
              developer.log(
                  '  Measurement Type: "${entry['selectedMeasurementType'] ?? ''}"',
                  name: 'StomachEntry');
              developer.log('  Total Area: "${entry['totalArea'] ?? ''}"',
                  name: 'StomachEntry');
              developer.log(
                  '  Calculated Area: "${entry['calculatedArea'] ?? ''}"',
                  name: 'StomachEntry');
            }
            break;

          case 'Non-agricultural':
            for (int i = 0;
                i < calculationController.nonAgriculturalEntries.length;
                i++) {
              final entry = calculationController.nonAgriculturalEntries[i];
              developer.log('Entry ${i + 1}:', name: 'NonAgriculturalEntry');
              developer.log('  Survey Number: "${entry['surveyNumber'] ?? ''}"',
                  name: 'NonAgriculturalEntry');
              developer.log(
                  '  Survey Type: "${entry['selectedSurveyType'] ?? ''}"',
                  name: 'NonAgriculturalEntry');
              developer.log('  Area: "${entry['area'] ?? ''}"',
                  name: 'NonAgriculturalEntry');
              developer.log('  Area Hectares: "${entry['areaHectares'] ?? ''}"',
                  name: 'NonAgriculturalEntry');
            }
            break;

          case 'Counting by number of knots':
            for (int i = 0;
                i < calculationController.knotsCountingEntries.length;
                i++) {
              final entry = calculationController.knotsCountingEntries[i];
              developer.log('Entry ${i + 1}:', name: 'KnotsCountingEntry');
              developer.log('  Survey Number: "${entry['surveyNumber'] ?? ''}"',
                  name: 'KnotsCountingEntry');
              developer.log(
                  '  Survey Type: "${entry['selectedSurveyType'] ?? ''}"',
                  name: 'KnotsCountingEntry');
              developer.log('  Area: "${entry['area'] ?? ''}"',
                  name: 'KnotsCountingEntry');
              developer.log('  Area Hectares: "${entry['areaHectares'] ?? ''}"',
                  name: 'KnotsCountingEntry');
            }
            break;

          case 'Integration calculation':
            developer.log(
                'Merger Order Number: "${calculationData['mergerOrderNumber']}"',
                name: 'IntegrationCalculation');
            developer.log(
                'Merger Order Date: "${calculationData['mergerOrderDate']}"',
                name: 'IntegrationCalculation');
            developer.log(
                'Old Merger Number: "${calculationData['oldMergerNumber']}"',
                name: 'IntegrationCalculation');
            developer.log(
                'incorporationOrderFiles raw: ${calculationController.incorporationOrderFiles}',
                name: 'IntegrationCalculation');

            // Print detailed entries
            for (int i = 0;
                i < calculationController.integrationCalculationEntries.length;
                i++) {
              final entry =
                  calculationController.integrationCalculationEntries[i];
              developer.log('Entry ${i + 1}:',
                  name: 'IntegrationCalculationEntry');
              developer.log(
                  '  CT Survey Number: "${entry['ctSurveyNumber'] ?? ''}"',
                  name: 'IntegrationCalculationEntry');
              developer.log(
                  '  Selected CT Survey: "${entry['selectedCTSurvey'] ?? ''}"',
                  name: 'IntegrationCalculationEntry');
              developer.log('  Area: "${entry['area'] ?? ''}"',
                  name: 'IntegrationCalculationEntry');
              developer.log('  Area Sqm: "${entry['areaSqm'] ?? ''}"',
                  name: 'IntegrationCalculationEntry');
            }
            break;

          default:
            developer.log(
                'No calculation type selected or unknown type: "$calcType"',
                name: 'CalculationData',
                level: 900);
        }
      } else {
        developer.log(
            'Calculation data is empty - no calculation type selected or no data entered',
            name: 'CalculationData',
            level: 900);
      }
    } catch (e) {
      developer.log('Error in calculation debug: $e',
          name: 'CalculationData', level: 1000); // Error level
    }

    developer.log('=== STEP FOUR DATA DEBUG ===', name: 'DebugInfo');

    try {
      // Get step four data using the fixed method
      final stepFourData = getStepFourData();

      if (stepFourData.isNotEmpty) {
        // Additional debugging for controller state
        developer.log(
            'Controller selectedCalculationType: "${stepFourController.selectedCalculationType.value}"',
            name: 'StepFourController');
        developer.log(
            'Controller selectedDuration: "${stepFourController.selectedDuration.value}"',
            name: 'StepFourController');
        developer.log(
            'Controller selectedHolderType: "${stepFourController.selectedHolderType.value}"',
            name: 'StepFourController');
        developer.log(
            'Controller selectedLocationCategory: "${stepFourController.selectedLocationCategory.value}"',
            name: 'StepFourController');
        developer.log(
            'Controller calculationFeeController text: "${stepFourController.calculationFeeController.text}"',
            name: 'StepFourController');
        developer.log(
            'Calculation Fee Numeric: ${stepFourData['calculation_fee_numeric'] ?? 'null'}',
            name: 'StepFourData');
      }
    } catch (e) {
      developer.log('Error in Step Four debug: $e',
          name: 'StepFourData', level: 1000); // Error level
    }

    developer.log('=== FIFTH CONTROLLER DATA DEBUG ===', name: 'DebugInfo');

    try {
      // Get applicant data using the fixed method
      final applicantData = getFifthController();

      if (applicantData.isNotEmpty) {
        final applicantCount = applicantData['applicantCount'] ?? 0;
        developer.log('Total Applicants: $applicantCount',
            name: 'ApplicantData');

        // Debug each applicant entry
        for (int i = 0; i < applicantCount; i++) {
          final applicantKey = 'applicant_$i';
          final applicantInfo =
              applicantData[applicantKey] as Map<String, dynamic>?;

          if (applicantInfo != null) {
            developer.log('=== APPLICANT ${i + 1} ===', name: 'ApplicantEntry');
            developer.log('Agreement: "${applicantInfo['agreement'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log(
                'Account Holder Name: "${applicantInfo['accountHolderName'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log(
                'Account Number: "${applicantInfo['accountNumber'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log(
                'Mobile Number: "${applicantInfo['mobileNumber'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log(
                'Server Number: "${applicantInfo['serverNumber'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log('Area: "${applicantInfo['area'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log(
                'Potkaharaba Area: "${applicantInfo['potkaharabaArea'] ?? ''}"',
                name: 'ApplicantEntry');
            developer.log('Total Area: "${applicantInfo['totalArea'] ?? ''}"',
                name: 'ApplicantEntry');

            // Debug address data
            final addressInfo =
                applicantInfo['address'] as Map<String, dynamic>?;
            if (addressInfo != null && addressInfo.isNotEmpty) {
              developer.log('=== ADDRESS ${i + 1} ===',
                  name: 'ApplicantAddress');
              developer.log('Plot No: "${addressInfo['plotNo'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('Address: "${addressInfo['address'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('Mobile: "${addressInfo['mobileNumber'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('Email: "${addressInfo['email'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('Pincode: "${addressInfo['pincode'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('District: "${addressInfo['district'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('Village: "${addressInfo['village'] ?? ''}"',
                  name: 'ApplicantAddress');
              developer.log('Post Office: "${addressInfo['postOffice'] ?? ''}"',
                  name: 'ApplicantAddress');
            } else {
              developer.log('No address data for applicant ${i + 1}',
                  name: 'ApplicantAddress', level: 900);
            }
          } else {
            developer.log('Applicant ${i + 1} data is null',
                name: 'ApplicantEntry', level: 900);
          }
        }
      } else {
        developer.log('Applicant data is empty - no applicants added',
            name: 'ApplicantData', level: 900);
      }
    } catch (e) {
      developer.log('Error in Applicant debug: $e',
          name: 'ApplicantData', level: 1000); // Error level
    }

    developer.log('=== END APPLICANT DEBUG ===', name: 'DebugInfo');

    developer.log('=== SIXTH CONTROLLER DATA DEBUG ===', name: 'DebugInfo');

    try {
      // Get co-owner data using the fixed method
      final coOwnerData = getSixthController();
      if (coOwnerData.isNotEmpty) {
        final coowners = coOwnerData['coowners'] as List<Map<String, dynamic>>?;

        if (coowners != null && coowners.isNotEmpty) {
          for (int i = 0; i < coowners.length; i++) {
            final coowner = coowners[i];

            developer.log('=== CO-OWNER ${i + 1} ===', name: 'CoOwnerEntry');
            developer.log('Name: "${coowner['name'] ?? ''}"',
                name: 'CoOwnerEntry');
            developer.log('Mobile Number: "${coowner['mobileNumber'] ?? ''}"',
                name: 'CoOwnerEntry');
            developer.log('Server Number: "${coowner['serverNumber'] ?? ''}"',
                name: 'CoOwnerEntry');
            developer.log('Consent: "${coowner['consent'] ?? ''}"',
                name: 'CoOwnerEntry');

            // Debug address data
            final addressInfo = coowner['address'] as Map<String, String>?;
            if (addressInfo != null && addressInfo.isNotEmpty) {
              developer.log('=== CO-OWNER ${i + 1} ADDRESS ===',
                  name: 'CoOwnerAddress');
              developer.log('Plot No: "${addressInfo['plotNo'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('Address: "${addressInfo['address'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('Mobile: "${addressInfo['mobileNumber'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('Email: "${addressInfo['email'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('Pincode: "${addressInfo['pincode'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('District: "${addressInfo['district'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('Village: "${addressInfo['village'] ?? ''}"',
                  name: 'CoOwnerAddress');
              developer.log('Post Office: "${addressInfo['postOffice'] ?? ''}"',
                  name: 'CoOwnerAddress');
            } else {
              developer.log('No address data for co-owner ${i + 1}',
                  name: 'CoOwnerAddress', level: 900);
            }

            // Show formatted address
            final formattedAddress =
                surveySixthController.getFormattedAddress(i);
            developer.log(
                'Formatted address for co-owner ${i + 1}: "$formattedAddress"',
                name: 'CoOwnerFormatted');
          }
        } else {
          developer.log('No co-owners in the list',
              name: 'CoOwnerData', level: 900);
        }
      } else {
        developer.log('Co-owner data is empty - no co-owners added',
            name: 'CoOwnerData', level: 900);
      }
    } catch (e) {
      developer.log('Error in Co-owner debug: $e',
          name: 'CoOwnerData', level: 1000); // Error level
    }

    developer.log('=== NEXT OF KIN DATA DEBUG ===', name: 'DebugInfo');

    try {
      // Get next of kin data using the fixed method
      final nextOfKinData = getSeventhController();

      if (nextOfKinData.isNotEmpty) {
        final entries =
            nextOfKinData['nextOfKinEntries'] as List<Map<String, dynamic>>?;

        if (entries != null && entries.isNotEmpty) {
          for (int i = 0; i < entries.length; i++) {
            final entry = entries[i];

            developer.log('=== NEXT OF KIN ${i + 1} ===',
                name: 'NextOfKinEntry');
            developer.log('Address: "${entry['address'] ?? ''}"',
                name: 'NextOfKinEntry');
            developer.log('Mobile: "${entry['mobile'] ?? ''}"',
                name: 'NextOfKinEntry');
            developer.log('Survey No: "${entry['surveyNo'] ?? ''}"',
                name: 'NextOfKinEntry');
            developer.log('Direction: "${entry['direction'] ?? ''}"',
                name: 'NextOfKinEntry');
            developer.log(
                'Natural Resources: "${entry['naturalResources'] ?? ''}"',
                name: 'NextOfKinEntry');

            // Check if required fields are filled
            final requiredFields = [
              'address',
              'mobile',
              'surveyNo',
              'direction',
              'naturalResources'
            ];
            final missingFields = <String>[];

            for (String field in requiredFields) {
              if ((entry[field] ?? '').toString().trim().isEmpty) {
                missingFields.add(field);
              }
            }
          }
        } else {
          developer.log('No next of kin entries in the list',
              name: 'NextOfKinData', level: 900);
        }
      } else {
        developer.log('Next of kin data is empty - no entries added',
            name: 'NextOfKinData', level: 900);
      }
    } catch (e) {
      developer.log('Error in Next of Kin debug: $e',
          name: 'NextOfKinData', level: 1000); // Error level
    }

    // developer.log('=== END NEXT OF KIN DEBUG ===', name: 'DebugInfo');

    developer.log('=== DOCUMENTS DATA DEBUG ===', name: 'DebugInfo');

    try {
      // Get documents data using the fixed method
      final documentsData = getDocumentsData();

      if (documentsData.isNotEmpty) {
        // Identity Card Information
        developer.log('=== IDENTITY CARD ===', name: 'DocumentsData');
        developer.log(
            'Identity Card Type: "${documentsData['identityCardType'] ?? ''}"',
            name: 'DocumentsData');

        final identityFiles =
            documentsData['identityCardFiles'] as List<String>?;
        if (identityFiles != null && identityFiles.isNotEmpty) {
          developer.log('Identity Card Path : "$identityFiles"',
              name: 'DocumentsData');
          // }
        } else {
          developer.log('No identity card files uploaded',
              name: 'DocumentsData', level: 900);
        }

        // Document Files Information
        final documentTypes = [
          {'key': 'sevenTwelveFiles', 'name': '7/12 Documents'},
          {'key': 'noteFiles', 'name': 'Note Documents'},
          {'key': 'partitionFiles', 'name': 'Partition Documents'},
          {'key': 'schemeSheetFiles', 'name': 'Scheme Sheet Documents'},
          {'key': 'oldCensusMapFiles', 'name': 'Old Census Map Documents'},
          {
            'key': 'demarcationCertificateFiles',
            'name': 'Demarcation Certificate Documents'
          },
        ];

        for (final docType in documentTypes) {
          final files = documentsData[docType['key']] as List<String>?;
          developer.log('=== ${docType['name']?.toUpperCase()} ===',
              name: 'DocumentsData');

          if (files != null && files.isNotEmpty) {
            for (int i = 0; i < files.length; i++) {
              final fileName = files[i].split('/').last;
              developer.log('${docType['name']} Path ${i + 1}: "${files[i]}"',
                  name: 'DocumentsData');
            }
          } else {
            developer.log('No ${docType['name']?.toLowerCase()} uploaded',
                name: 'DocumentsData', level: 900);
          }
        }
      }
    } catch (e) {
      developer.log('Error in Documents debug: $e',
          name: 'DocumentsData', level: 1000); // Error level
    }

    developer.log('=== END DOCUMENTS DEBUG ===', name: 'DebugInfo');

    developer.log('=== END DEBUG ===', name: 'DebugInfo');
  }




------------------------------------------------------


 Map<String, dynamic> PostRequestBody() {

    // Get all data first
    final surveyData = getSurveyInfoData();
    final surveyInfo = surveyData['survey_cts'] as Map<String, dynamic>?;
    final calculationData = getCalculationData();
    final stepFourData = getStepFourData();
    final applicantData = getFifthController();
    final coOwnerData = getSixthController();
    final nextOfKinData = getSeventhController();
    final documentsData = getDocumentsData();

    return {
      // === PERSONAL INFO ===
      "is_holder_themselves": personalInfoController.isHolderThemselves.value.toString(),
      "has_authority_on_behalf": personalInfoController.hasAuthorityOnBehalf.value.toString(),
      "has_been_counted_before": personalInfoController.hasBeenCountedBefore.value.toString(),
      "poa_registration_number": personalInfoController.poaRegistrationNumberController.text.trim(),
      "poa_registration_date": personalInfoController.poaRegistrationDateController.text.trim(),
      "poa_issuer_name": personalInfoController.poaIssuerNameController.text.trim(),
      "poa_holder_name": personalInfoController.poaHolderNameController.text.trim(),
      "poa_holder_address": personalInfoController.poaHolderAddressController.text.trim(),

      // === SURVEY INFO ===
      "survey_number": surveyInfo?['survey_number']?.toString() ?? "",
      "department": surveyInfo?['department']?.toString() ?? "",
      "district": surveyInfo?['district']?.toString() ?? "",
      "taluka": surveyInfo?['taluka']?.toString() ?? "",
      "village": surveyInfo?['village']?.toString() ?? "",
      "office": surveyInfo?['office']?.toString() ?? "",

      // === CALCULATION DATA ===
      "calculation_type": calculationData['calculationType']?.toString() ?? "",
      "order_number": calculationData['orderNumber']?.toString() ?? "",
      "order_date": calculationData['orderDate']?.toString() ?? "",
      "scheme_order_number": calculationData['schemeOrderNumber']?.toString() ?? "",
      "appointment_date": calculationData['appointmentDate']?.toString() ?? "",

      // === STEP FOUR DATA ===
      "selected_calculation_type": stepFourController.selectedCalculationType.value,
      "selected_duration": stepFourController.selectedDuration.value,
      "selected_holder_type": stepFourController.selectedHolderType.value,
      "selected_location_category": stepFourController.selectedLocationCategory.value,
      "calculation_fee": stepFourController.calculationFeeController.text,
      "calculation_fee_numeric": stepFourData['calculation_fee_numeric']?.toString() ?? "",

      // === APPLICANT COUNT ===
      "applicant_count": (applicantData['applicantCount'] ?? 0).toString(),

      // === CO-OWNER COUNT ===
      "co_owners_count": ((coOwnerData['coowners'] as List?)?.length ?? 0).toString(),

      // === NEXT OF KIN COUNT ===
      "next_of_kin_count": ((nextOfKinData['nextOfKinEntries'] as List?)?.length ?? 0).toString(),

      // === DOCUMENT INFO ===
      "identity_card_type": documentsData['identityCardType']?.toString() ?? "",
      "identity_card_file": ((documentsData['identityCardFiles'] as List?)?.isNotEmpty == true) ? (documentsData['identityCardFiles'] as List)[0].toString() : "",
      "seven_twelve_file": ((documentsData['sevenTwelveFiles'] as List?)?.isNotEmpty == true) ? (documentsData['sevenTwelveFiles'] as List)[0].toString() : "",
      "note_file": ((documentsData['noteFiles'] as List?)?.isNotEmpty == true) ? (documentsData['noteFiles'] as List)[0].toString() : "",
      "partition_file": ((documentsData['partitionFiles'] as List?)?.isNotEmpty == true) ? (documentsData['partitionFiles'] as List)[0].toString() : "",
      "scheme_sheet_file": ((documentsData['schemeSheetFiles'] as List?)?.isNotEmpty == true) ? (documentsData['schemeSheetFiles'] as List)[0].toString() : "",
      "old_census_map_file": ((documentsData['oldCensusMapFiles'] as List?)?.isNotEmpty == true) ? (documentsData['oldCensusMapFiles'] as List)[0].toString() : "",
      "demarcation_certificate_file": ((documentsData['demarcationCertificateFiles'] as List?)?.isNotEmpty == true) ? (documentsData['demarcationCertificateFiles'] as List)[0].toString() : "",

      // === CALCULATION SPECIFIC DATA (Based on Type) ===
      ...() {
        String calcType = calculationData['calculationType']?.toString() ?? '';
        Map<String, dynamic> typeSpecificData = {};

        switch (calcType) {
          case 'Hddkayam':
            typeSpecificData["hddkayam_entries_count"] = (calculationController.hddkayamEntries.length).toString();
            for (int i = 0; i < calculationController.hddkayamEntries.length; i++) {
              final entry = calculationController.hddkayamEntries[i];
              typeSpecificData["hddkayam_${i}_ct_survey_number"] = entry['ctSurveyNumber']?.toString() ?? "";
              typeSpecificData["hddkayam_${i}_selected_ct_survey"] = entry['selectedCTSurvey']?.toString() ?? "";
              typeSpecificData["hddkayam_${i}_area"] = entry['area']?.toString() ?? "";
              typeSpecificData["hddkayam_${i}_area_sqm"] = entry['areaSqm']?.toString() ?? "";
              typeSpecificData["hddkayam_${i}_is_correct"] = (entry['isCorrect'] ?? false).toString();
            }
            break;

          case 'Stomach':
            typeSpecificData["stomach_entries_count"] = (calculationController.stomachEntries.length).toString();
            for (int i = 0; i < calculationController.stomachEntries.length; i++) {
              final entry = calculationController.stomachEntries[i];
              typeSpecificData["stomach_${i}_survey_number"] = entry['surveyNumber']?.toString() ?? "";
              typeSpecificData["stomach_${i}_measurement_type"] = entry['selectedMeasurementType']?.toString() ?? "";
              typeSpecificData["stomach_${i}_total_area"] = entry['totalArea']?.toString() ?? "";
              typeSpecificData["stomach_${i}_calculated_area"] = entry['calculatedArea']?.toString() ?? "";
            }
            break;

          case 'Non-agricultural':
            typeSpecificData["non_agricultural_entries_count"] = (calculationController.nonAgriculturalEntries.length).toString();
            for (int i = 0; i < calculationController.nonAgriculturalEntries.length; i++) {
              final entry = calculationController.nonAgriculturalEntries[i];
              typeSpecificData["non_agricultural_${i}_survey_number"] = entry['surveyNumber']?.toString() ?? "";
              typeSpecificData["non_agricultural_${i}_survey_type"] = entry['selectedSurveyType']?.toString() ?? "";
              typeSpecificData["non_agricultural_${i}_area"] = entry['area']?.toString() ?? "";
              typeSpecificData["non_agricultural_${i}_area_hectares"] = entry['areaHectares']?.toString() ?? "";
            }
            break;

          case 'Integration calculation':
            typeSpecificData["merger_order_number"] = calculationData['mergerOrderNumber']?.toString() ?? "";
            typeSpecificData["merger_order_date"] = calculationData['mergerOrderDate']?.toString() ?? "";
            typeSpecificData["old_merger_number"] = calculationData['oldMergerNumber']?.toString() ?? "";
            typeSpecificData["integration_entries_count"] = (calculationController.integrationCalculationEntries.length).toString();
            for (int i = 0; i < calculationController.integrationCalculationEntries.length; i++) {
              final entry = calculationController.integrationCalculationEntries[i];
              typeSpecificData["integration_${i}_ct_survey_number"] = entry['ctSurveyNumber']?.toString() ?? "";
              typeSpecificData["integration_${i}_selected_ct_survey"] = entry['selectedCTSurvey']?.toString() ?? "";
              typeSpecificData["integration_${i}_area"] = entry['area']?.toString() ?? "";
              typeSpecificData["integration_${i}_area_sqm"] = entry['areaSqm']?.toString() ?? "";
            }
            break;
        }

        return typeSpecificData;
      }(),

      // === APPLICANT DETAILS ===
      ...() {
        Map<String, dynamic> applicantDetails = {};
        final applicantCount = applicantData['applicantCount'] ?? 0;

        for (int i = 0; i < applicantCount; i++) {
          final applicantKey = 'applicant_$i';
          final applicantInfo = applicantData[applicantKey] as Map<String, dynamic>?;

          if (applicantInfo != null) {
            applicantDetails["applicant_${i}_agreement"] = applicantInfo['agreement']?.toString() ?? "";
            applicantDetails["applicant_${i}_account_holder_name"] = applicantInfo['accountHolderName']?.toString() ?? "";
            applicantDetails["applicant_${i}_account_number"] = applicantInfo['accountNumber']?.toString() ?? "";
            applicantDetails["applicant_${i}_mobile_number"] = applicantInfo['mobileNumber']?.toString() ?? "";
            applicantDetails["applicant_${i}_server_number"] = applicantInfo['serverNumber']?.toString() ?? "";
            applicantDetails["applicant_${i}_area"] = applicantInfo['area']?.toString() ?? "";
            applicantDetails["applicant_${i}_potkaharaba_area"] = applicantInfo['potkaharabaArea']?.toString() ?? "";
            applicantDetails["applicant_${i}_total_area"] = applicantInfo['totalArea']?.toString() ?? "";

            final addressInfo = applicantInfo['address'] as Map<String, dynamic>?;
            if (addressInfo != null) {
              applicantDetails["applicant_${i}_plot_no"] = addressInfo['plotNo']?.toString() ?? "";
              applicantDetails["applicant_${i}_address"] = addressInfo['address']?.toString() ?? "";
              applicantDetails["applicant_${i}_address_mobile"] = addressInfo['mobileNumber']?.toString() ?? "";
              applicantDetails["applicant_${i}_email"] = addressInfo['email']?.toString() ?? "";
              applicantDetails["applicant_${i}_pincode"] = addressInfo['pincode']?.toString() ?? "";
              applicantDetails["applicant_${i}_address_district"] = addressInfo['district']?.toString() ?? "";
              applicantDetails["applicant_${i}_address_village"] = addressInfo['village']?.toString() ?? "";
              applicantDetails["applicant_${i}_post_office"] = addressInfo['postOffice']?.toString() ?? "";
            }
          }
        }

        return applicantDetails;
      }(),

      // === CO-OWNER DETAILS ===
      ...() {
        Map<String, dynamic> coOwnerDetails = {};
        final coowners = coOwnerData['coowners'] as List<Map<String, dynamic>>?;

        if (coowners != null) {
          for (int i = 0; i < coowners.length; i++) {
            final coowner = coowners[i];
            coOwnerDetails["co_owner_${i}_name"] = coowner['name']?.toString() ?? "";
            coOwnerDetails["co_owner_${i}_mobile_number"] = coowner['mobileNumber']?.toString() ?? "";
            coOwnerDetails["co_owner_${i}_server_number"] = coowner['serverNumber']?.toString() ?? "";
            coOwnerDetails["co_owner_${i}_consent"] = coowner['consent']?.toString() ?? "";

            final addressInfo = coowner['address'] as Map<String, String>?;
            if (addressInfo != null) {
              coOwnerDetails["co_owner_${i}_plot_no"] = addressInfo['plotNo'] ?? "";
              coOwnerDetails["co_owner_${i}_address"] = addressInfo['address'] ?? "";
              coOwnerDetails["co_owner_${i}_address_mobile"] = addressInfo['mobileNumber'] ?? "";
              coOwnerDetails["co_owner_${i}_email"] = addressInfo['email'] ?? "";
              coOwnerDetails["co_owner_${i}_pincode"] = addressInfo['pincode'] ?? "";
              coOwnerDetails["co_owner_${i}_address_district"] = addressInfo['district'] ?? "";
              coOwnerDetails["co_owner_${i}_address_village"] = addressInfo['village'] ?? "";
              coOwnerDetails["co_owner_${i}_post_office"] = addressInfo['postOffice'] ?? "";
            }
          }
        }

        return coOwnerDetails;
      }(),

      // === NEXT OF KIN DETAILS ===
      ...() {
        Map<String, dynamic> nextOfKinDetails = {};
        final entries = nextOfKinData['nextOfKinEntries'] as List<Map<String, dynamic>>?;

        if (entries != null) {
          for (int i = 0; i < entries.length; i++) {
            final entry = entries[i];
            nextOfKinDetails["next_of_kin_${i}_address"] = entry['address']?.toString() ?? "";
            nextOfKinDetails["next_of_kin_${i}_mobile"] = entry['mobile']?.toString() ?? "";
            nextOfKinDetails["next_of_kin_${i}_survey_no"] = entry['surveyNo']?.toString() ?? "";
            nextOfKinDetails["next_of_kin_${i}_direction"] = entry['direction']?.toString() ?? "";
            nextOfKinDetails["next_of_kin_${i}_natural_resources"] = entry['naturalResources']?.toString() ?? "";
          }
        }

        return nextOfKinDetails;
      }(),

    };
  }


  ---------------------------------------


    Map<String, dynamic> PostRequestBody() {
      // Get all data
      final surveyData = getSurveyInfoData();
      final surveyInfo = surveyData['survey_cts'] as Map<String, dynamic>?;
      final calculationData = getCalculationData();
      final stepFourData = getStepFourData();
      final applicantData = getFifthController();
      final coOwnerData = getSixthController();
      final nextOfKinData = getSeventhController();

      return {
        // === PERSONAL INFO ===
        "is_landholder": personalInfoController.isHolderThemselves.value.toString(),
        "has_authority_on_behalf": personalInfoController.hasAuthorityOnBehalf.value.toString(),
        "has_been_counted_before": personalInfoController.hasBeenCountedBefore.value.toString(),
        "poa_registration_number": personalInfoController.poaRegistrationNumberController.text.trim(),
        "poa_registration_date": personalInfoController.poaRegistrationDateController.text.trim(),
        "poa_issuer_name": personalInfoController.poaIssuerNameController.text.trim(),
        "poa_holder_name": personalInfoController.poaHolderNameController.text.trim(),
        "poa_holder_address": personalInfoController.poaHolderAddressController.text.trim(),
        "seven_twelve_files": personalInfoController.sevenTwelveFiles.toList(),

        // === SURVEY INFO ===
        "survey_number": surveyInfo?['survey_number']?.toString() ?? "",
        "department": surveyInfo?['department']?.toString() ?? "",
        "district": surveyInfo?['district']?.toString() ?? "",
        "taluka": surveyInfo?['taluka']?.toString() ?? "",
        "village": surveyInfo?['village']?.toString() ?? "",
        "office": surveyInfo?['office']?.toString() ?? "",

        // === CALCULATION INFO ===
        "calculation_type": calculationData['calculationType']?.toString() ?? "",

        // === STEP FOUR INFO ===
        "selected_calculation_type": stepFourController.selectedCalculationType.value,
        "selected_duration": stepFourController.selectedDuration.value,
        "selected_holder_type": stepFourController.selectedHolderType.value,
        "selected_location_category": stepFourController.selectedLocationCategory.value,
        "calculation_fee": stepFourController.calculationFeeController.text.trim(),
        "calculation_fee_numeric": stepFourData['calculation_fee_numeric']?.toString() ?? "",

        // === CALCULATION ENTRIES ===
        "calculation_entries": () {
          String calcType = calculationData['calculationType']?.toString() ?? '';
          List<Map<String, dynamic>> entries = [];

          switch (calcType) {
            case 'Hddkayam':
              for (int i = 0; i < calculationController.hddkayamEntries.length; i++) {
                final entry = calculationController.hddkayamEntries[i];
                entries.add({
                  "ct_survey_number": entry['ctSurveyNumber']?.toString() ?? "",
                  "selected_ct_survey": entry['selectedCTSurvey']?.toString() ?? "",
                  "area": entry['area']?.toString() ?? "",
                  "area_sqm": entry['areaSqm']?.toString() ?? "",
                });
              }
              break;

            case 'Stomach':
              for (int i = 0; i < calculationController.stomachEntries.length; i++) {
                final entry = calculationController.stomachEntries[i];
                entries.add({
                  "survey_number": entry['surveyNumber']?.toString() ?? "",
                  "measurement_type": entry['selectedMeasurementType']?.toString() ?? "",
                  "total_area": entry['totalArea']?.toString() ?? "",
                  "calculated_area": entry['calculatedArea']?.toString() ?? "",
                });
              }
              break;

            case 'Non-agricultural':
              for (int i = 0; i < calculationController.nonAgriculturalEntries.length; i++) {
                final entry = calculationController.nonAgriculturalEntries[i];
                entries.add({
                  "survey_number": entry['surveyNumber']?.toString() ?? "",
                  "survey_type": entry['selectedSurveyType']?.toString() ?? "",
                  "area": entry['area']?.toString() ?? "",
                  "area_hectares": entry['areaHectares']?.toString() ?? "",
                });
              }
              break;

            case 'Counting by number of knots':
              for (int i = 0; i < calculationController.knotsCountingEntries.length; i++) {
                final entry = calculationController.knotsCountingEntries[i];
                entries.add({
                  "survey_number": entry['surveyNumber']?.toString() ?? "",
                  "survey_type": entry['selectedSurveyType']?.toString() ?? "",
                  "area": entry['area']?.toString() ?? "",
                  "area_hectares": entry['areaHectares']?.toString() ?? "",
                });
              }
              break;

            case 'Integration calculation':
              for (int i = 0; i < calculationController.integrationCalculationEntries.length; i++) {
                final entry = calculationController.integrationCalculationEntries[i];
                entries.add({
                  "ct_survey_number": entry['ctSurveyNumber']?.toString() ?? "",
                  "selected_ct_survey": entry['selectedCTSurvey']?.toString() ?? "",
                  "area": entry['area']?.toString() ?? "",
                  "area_sqm": entry['areaSqm']?.toString() ?? "",
                });
              }
              break;
          }

          return entries;
        }(),

        // === APPLICANTS ===
        "applicants": () {
          List<Map<String, dynamic>> applicantsList = [];
          final applicantCount = applicantData['applicantCount'] ?? 0;

          for (int i = 0; i < applicantCount; i++) {
            final applicantKey = 'applicant_$i';
            final applicantInfo = applicantData[applicantKey] as Map<String, dynamic>?;

            if (applicantInfo != null) {
              final addressInfo = applicantInfo['address'] as Map<String, dynamic>?;

              applicantsList.add({
                "agreement": applicantInfo['agreement']?.toString() ?? "",
                "account_holder_name": applicantInfo['accountHolderName']?.toString() ?? "",
                "account_number": applicantInfo['accountNumber']?.toString() ?? "",
                "mobile_number": applicantInfo['mobileNumber']?.toString() ?? "",
                "server_number": applicantInfo['serverNumber']?.toString() ?? "",
                "area": applicantInfo['area']?.toString() ?? "",
                "potkaharaba_area": applicantInfo['potkaharabaArea']?.toString() ?? "",
                "total_area": applicantInfo['totalArea']?.toString() ?? "",
                "plot_no": addressInfo?['plotNo']?.toString() ?? "",
                "address": addressInfo?['address']?.toString() ?? "",
                "address_mobile_number": addressInfo?['mobileNumber']?.toString() ?? "",
                "email": addressInfo?['email']?.toString() ?? "",
                "pincode": addressInfo?['pincode']?.toString() ?? "",
                "address_district": addressInfo?['district']?.toString() ?? "",
                "address_village": addressInfo?['village']?.toString() ?? "",
                "post_office": addressInfo?['postOffice']?.toString() ?? "",
              });
            }
          }

          return applicantsList;
        }(),

        // === CO-OWNERS ===
        "co_owners": () {
          List<Map<String, dynamic>> coOwnersList = [];
          final coowners = coOwnerData['coowners'] as List<Map<String, dynamic>>?;

          if (coowners != null) {
            for (int i = 0; i < coowners.length; i++) {
              final coowner = coowners[i];
              final addressInfo = coowner['address'] as Map<String, String>?;

              coOwnersList.add({
                "name": coowner['name']?.toString() ?? "",
                "mobile_number": coowner['mobileNumber']?.toString() ?? "",
                "server_number": coowner['serverNumber']?.toString() ?? "",
                "consent": coowner['consent']?.toString() ?? "",
                "plot_no": addressInfo?['plotNo'] ?? "",
                "address": addressInfo?['address'] ?? "",
                "address_mobile_number": addressInfo?['mobileNumber'] ?? "",
                "email": addressInfo?['email'] ?? "",
                "pincode": addressInfo?['pincode'] ?? "",
                "address_district": addressInfo?['district'] ?? "",
                "address_village": addressInfo?['village'] ?? "",
                "post_office": addressInfo?['postOffice'] ?? "",
              });
            }
          }

          return coOwnersList;
        }(),

        // === NEXT OF KIN ===
        "next_of_kin": () {
          List<Map<String, dynamic>> nextOfKinList = [];
          final entries = nextOfKinData['nextOfKinEntries'] as List<Map<String, dynamic>>?;

          if (entries != null) {
            for (int i = 0; i < entries.length; i++) {
              final entry = entries[i];
              nextOfKinList.add({
                "address": entry['address']?.toString() ?? "",
                "mobile": entry['mobile']?.toString() ?? "",
                "survey_no": entry['surveyNo']?.toString() ?? "",
                "direction": entry['direction']?.toString() ?? "",
                "natural_resources": entry['naturalResources']?.toString() ?? "",
              });
            }
          }

          return nextOfKinList;
        }(),

        // === DOCUMENTS ===
        "identity_card_type": surveyEightController.selectedIdentityType.value,
        "identity_card_files": surveyEightController.identityCardFiles?.map((file) => file.toString()).toList() ?? [],
        "seven_twelve_files": surveyEightController.sevenTwelveFiles?.map((file) => file.toString()).toList() ?? [],
        "note_files": surveyEightController.noteFiles?.map((file) => file.toString()).toList() ?? [],
        "partition_files": surveyEightController.partitionFiles?.map((file) => file.toString()).toList() ?? [],
        "scheme_sheet_files": surveyEightController.schemeSheetFiles?.map((file) => file.toString()).toList() ?? [],
        "old_census_map_files": surveyEightController.oldCensusMapFiles?.map((file) => file.toString()).toList() ?? [],
        "demarcation_certificate_files": surveyEightController.demarcationCertificateFiles?.map((file) => file.toString()).toList() ?? [],
      };
    }
