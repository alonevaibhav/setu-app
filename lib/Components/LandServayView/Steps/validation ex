// 1. Add these controllers to your SurveyController class
final poaRegistrationNumberController = TextEditingController();
final poaRegistrationDateController = TextEditingController();
final poaIssuerNameController = TextEditingController();
final poaHolderNameController = TextEditingController();
final poaHolderAddressController = TextEditingController();

// 2. Add to onClose() method
@override
void onClose() {
  // ... existing dispose calls ...
  poaRegistrationNumberController.dispose();
  poaRegistrationDateController.dispose();
  poaIssuerNameController.dispose();
  poaHolderNameController.dispose();
  poaHolderAddressController.dispose();
  super.onClose();
}

// 3. Update validateField method - add this case
bool validateField(String field) {
  switch (field) {
    case 'holder_verification':
      // Check if holder themselves is selected
      if (isHolderThemselves.value == null) return false;

      // If not holder themselves, check authority
      if (isHolderThemselves.value == false) {
        if (hasAuthorityOnBehalf.value == null) return false;

        // If has authority, validate POA fields
        if (hasAuthorityOnBehalf.value == true) {
          return poaRegistrationNumberController.text.trim().length >= 3 &&
                 poaRegistrationDateController.text.trim().isNotEmpty &&
                 poaIssuerNameController.text.trim().length >= 2 &&
                 poaHolderNameController.text.trim().length >= 2 &&
                 poaHolderAddressController.text.trim().length >= 5;
        }
      }
      return true;

    case 'enumeration_check':
      return hasBeenCountedBefore.value != null;

    // ... rest of your existing cases ...
  }
}

// 4. Update getFieldError method - add this case
String getFieldError(String field) {
  switch (field) {
    case 'holder_verification':
      if (isHolderThemselves.value == null) {
        return 'Please select if you are the holder';
      }
      if (isHolderThemselves.value == false && hasAuthorityOnBehalf.value == null) {
        return 'Please select if you have authority on behalf';
      }
      if (isHolderThemselves.value == false && hasAuthorityOnBehalf.value == true) {
        if (poaRegistrationNumberController.text.trim().length < 3) {
          return 'Registration number must be at least 3 characters';
        }
        if (poaRegistrationDateController.text.trim().isEmpty) {
          return 'Registration date is required';
        }
        if (poaIssuerNameController.text.trim().length < 2) {
          return 'Issuer name must be at least 2 characters';
        }
        if (poaHolderNameController.text.trim().length < 2) {
          return 'Holder name must be at least 2 characters';
        }
        if (poaHolderAddressController.text.trim().length < 5) {
          return 'Address must be at least 5 characters';
        }
      }
      return 'Please complete holder verification';

    case 'enumeration_check':
      return 'Please select if this has been counted before';

    // ... rest of your existing cases ...
  }
}

// 5. Update _buildAdditionalFields() method - replace TextEditingController() with actual controllers
Widget _buildAdditionalFields() {
  return Container(
    padding: EdgeInsets.all(16.w * SurveyUIUtils.sizeFactor),
    decoration: BoxDecoration(
      color: SetuColors.primaryGreen.withOpacity(0.05),
      borderRadius: BorderRadius.circular(12.r * SurveyUIUtils.sizeFactor),
      border: Border.all(color: SetuColors.primaryGreen.withOpacity(0.2)),
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SurveyUIUtils.buildTranslatableText(
          text: 'Power of Attorney Details',
          style: GoogleFonts.poppins(
            fontSize: 18.sp * SurveyUIUtils.sizeFactor,
            fontWeight: FontWeight.w700,
            color: SetuColors.primaryGreen,
          ),
        ),
        Gap(16.h * SurveyUIUtils.sizeFactor),

        // Power of Attorney Registration Number
        SurveyUIUtils.buildTextFormField(
          controller: controller.poaRegistrationNumberController, // Updated
          label: 'Power of Attorney / Registration Number',
          hint: 'Enter registration number',
          icon: PhosphorIcons.fileText(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.text,
          validator: (value) {
            if (value == null || value.trim().length < 3) {
              return 'Registration number must be at least 3 characters';
            }
            return null;
          },
        ),
        Gap(16.h * SurveyUIUtils.sizeFactor),

        // Power of Attorney Registration Date
        SurveyUIUtils.buildTextFormField(
          controller: controller.poaRegistrationDateController, // Updated
          label: 'Power of Attorney Registration Date',
          hint: 'Enter registration date',
          icon: PhosphorIcons.calendar(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.datetime,
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Registration date is required';
            }
            return null;
          },
        ),
        Gap(16.h * SurveyUIUtils.sizeFactor),

        // Name of the holder issuing the power of attorney
        SurveyUIUtils.buildTextFormField(
          controller: controller.poaIssuerNameController, // Updated
          label: 'Name of the holder issuing the power of attorney',
          hint: 'Enter holder name',
          icon: PhosphorIcons.user(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.name,
          validator: (value) {
            if (value == null || value.trim().length < 2) {
              return 'Holder name must be at least 2 characters';
            }
            return null;
          },
        ),
        Gap(16.h * SurveyUIUtils.sizeFactor),

        // Name of the holder of the Power of Attorney
        SurveyUIUtils.buildTextFormField(
          controller: controller.poaHolderNameController, // Updated
          label: 'Name of the holder of the Power of Attorney',
          hint: 'Enter attorney holder name',
          icon: PhosphorIcons.user(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.name,
          validator: (value) {
            if (value == null || value.trim().length < 2) {
              return 'Attorney holder name must be at least 2 characters';
            }
            return null;
          },
        ),
        Gap(16.h * SurveyUIUtils.sizeFactor),

        // Address holding Power of Attorney
        SurveyUIUtils.buildTextFormField(
          controller: controller.poaHolderAddressController, // Updated
          label: 'Address holding Power of Attorney',
          hint: 'Enter full address',
          icon: PhosphorIcons.mapPin(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.streetAddress,
          maxLines: 3,
          validator: (value) {
            if (value == null || value.trim().length < 5) {
              return 'Address must be at least 5 characters';
            }
            return null;
          },
        ),
      ],
    ),
  );
}


This implementation will:

Add proper controllers for all Power of Attorney fields
Validate the holder_verification step - checks all required fields when POA is needed
Work seamlessly with buildNavigationButtons - the Next button will be disabled until validation passes
Show appropriate error messages for each validation failure
Clean up resources properly in onClose()

The validation will automatically trigger when the user tries to navigate using the Next button, and the specific error message will be shown via the existing snackbar system.