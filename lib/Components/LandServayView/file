// lib/features/survey/controllers/survey_controller.dart
import 'package:get/get.dart';
import 'package:flutter/material.dart';

class SurveyController extends GetxController {
  // Survey Flow State
  final currentStep = 0.obs;
  final currentSubStep = 0.obs;
  final isLoading = false.obs;
  final errorMessage = ''.obs;

  // Form Controllers
  final nameController = TextEditingController();
  final phoneController = TextEditingController();
  final emailController = TextEditingController();
  final addressController = TextEditingController();
  final remarksController = TextEditingController();

  // Dropdown Values
  final selectedGender = ''.obs;
  final selectedCategory = ''.obs;
  final selectedState = ''.obs;
  final selectedSurveyType = ''.obs;

  // Validation States
  final validationErrors = <String, String>{}.obs;
  final isStepValid = <int, bool>{}.obs;

  // Survey Data Storage
  final surveyData = Rxn<Map<String, dynamic>>();

  // Sub-step configurations for each main step
  final Map<int, List<String>> stepConfigurations = {
    0: ['name', 'phone', 'email', 'gender', 'category'], // Personal Info substeps
    1: ['address', 'state', 'surveyType', 'documents'], // Survey/CTS substeps
    2: ['remarks', 'status', 'images', 'summary'], // Survey Information substeps
  };

  @override
  void onInit() {
    super.onInit();
    initializeSurveyData();
    initializeValidationStates();
  }

  @override
  void onClose() {
    nameController.dispose();
    phoneController.dispose();
    emailController.dispose();
    addressController.dispose();
    remarksController.dispose();
    super.onClose();
  }

  void initializeSurveyData() {
    surveyData.value = {
      'applicationId': '',
      'status': 'draft',
      'timestamp': DateTime.now().toIso8601String(),
    };
  }

  void initializeValidationStates() {
    for (int i = 0; i <= 2; i++) {
      isStepValid[i] = false;
    }
  }

  // Get total sub-steps for current main step
  int get totalSubStepsInCurrentStep => stepConfigurations[currentStep.value]?.length ?? 1;

  // Get current sub-step field name
  String get currentSubStepField {
    final fields = stepConfigurations[currentStep.value];
    if (fields != null && currentSubStep.value < fields.length) {
      return fields[currentSubStep.value];
    }
    return '';
  }

  // Check if current sub-step is valid
  bool get isCurrentSubStepValid {
    final field = currentSubStepField;
    return validateField(field);
  }

  // Check if entire main step is completed
  bool isMainStepCompleted(int step) {
    final fields = stepConfigurations[step];
    if (fields == null) return false;

    for (String field in fields) {
      if (!validateField(field)) return false;
    }
    return true;
  }

  // Navigation Methods
  void nextSubStep() {
    if (!isCurrentSubStepValid) {
      _showValidationError();
      return;
    }

    _saveCurrentSubStepData();

    if (currentSubStep.value < totalSubStepsInCurrentStep - 1) {
      currentSubStep.value++;
    } else {
      // Move to next main step
      if (currentStep.value < 2) {
        currentStep.value++;
        currentSubStep.value = 0;
        _updateStepValidation();
      } else {
        submitSurvey();
      }
    }
  }

  void previousSubStep() {
    if (currentSubStep.value > 0) {
      currentSubStep.value--;
    } else if (currentStep.value > 0) {
      currentStep.value--;
      currentSubStep.value = totalSubStepsInCurrentStep - 1;
    }
  }

  void goToStep(int step) {
    if (step >= 0 && step <= 2) {
      // Check if previous steps are completed
      bool canNavigate = true;
      for (int i = 0; i < step; i++) {
        if (!isMainStepCompleted(i)) {
          canNavigate = false;
          break;
        }
      }

      if (canNavigate || step <= currentStep.value) {
        currentStep.value = step;
        currentSubStep.value = 0;
      } else {
        Get.snackbar(
          'Incomplete',
          'Please complete previous steps first',
          backgroundColor: Color(0xFFFFC107),
          colorText: Colors.black,
        );
      }
    }
  }

  // Validation Methods
  bool validateField(String field) {
    switch (field) {
      case 'name':
        return nameController.text.trim().length >= 2;
      case 'phone':
        return phoneController.text.trim().length == 10 &&
               RegExp(r'^[0-9]+$').hasMatch(phoneController.text.trim());
      case 'email':
        return RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$')
            .hasMatch(emailController.text.trim());
      case 'gender':
        return selectedGender.value.isNotEmpty;
      case 'category':
        return selectedCategory.value.isNotEmpty;
      case 'address':
        return addressController.text.trim().length >= 10;
      case 'state':
        return selectedState.value.isNotEmpty;
      case 'surveyType':
        return selectedSurveyType.value.isNotEmpty;
      case 'documents':
        return true; // Optional for now
      case 'remarks':
        return remarksController.text.trim().length >= 5;
      case 'status':
        return true; // Always valid
      case 'images':
        return true; // Optional
      case 'summary':
        return true; // Always valid
      default:
        return true;
    }
  }

  String getFieldError(String field) {
    switch (field) {
      case 'name':
        return 'Name must be at least 2 characters';
      case 'phone':
        return 'Phone must be exactly 10 digits';
      case 'email':
        return 'Please enter a valid email address';
      case 'gender':
        return 'Please select your gender';
      case 'category':
        return 'Please select your category';
      case 'address':
        return 'Address must be at least 10 characters';
      case 'state':
        return 'Please select your state';
      case 'surveyType':
        return 'Please select survey type';
      case 'remarks':
        return 'Remarks must be at least 5 characters';
      default:
        return 'This field is required';
    }
  }

  void _showValidationError() {
    final field = currentSubStepField;
    final error = getFieldError(field);
    Get.snackbar(
      'Validation Error',
      error,
      backgroundColor: Color(0xFFDC3545),
      colorText: Colors.white,
    );
  }

  void _saveCurrentSubStepData() {
    final field = currentSubStepField;
    final currentData = Map<String, dynamic>.from(surveyData.value ?? {});

    switch (field) {
      case 'name':
        currentData['fullName'] = nameController.text.trim();
        break;
      case 'phone':
        currentData['phone'] = phoneController.text.trim();
        break;
      case 'email':
        currentData['email'] = emailController.text.trim();
        break;
      case 'gender':
        currentData['gender'] = selectedGender.value;
        break;
      case 'category':
        currentData['category'] = selectedCategory.value;
        break;
      case 'address':
        currentData['address'] = addressController.text.trim();
        break;
      case 'state':
        currentData['state'] = selectedState.value;
        break;
      case 'surveyType':
        currentData['surveyType'] = selectedSurveyType.value;
        break;
      case 'remarks':
        currentData['remarks'] = remarksController.text.trim();
        break;
    }

    surveyData.value = currentData;
  }

  void _updateStepValidation() {
    for (int i = 0; i <= 2; i++) {
      isStepValid[i] = isMainStepCompleted(i);
    }
  }

  // Get step indicator color
  Color getStepIndicatorColor(int step) {
    if (isMainStepCompleted(step)) {
      return Color(0xFF52B788); // Green for completed
    } else if (step == currentStep.value) {
      return Color(0xFFFFC107); // Yellow for current
    } else {
      return Colors.white.withOpacity(0.3); // Default
    }
  }

  // Get button text based on current state
  String get nextButtonText {
    if (currentStep.value == 2 && currentSubStep.value == totalSubStepsInCurrentStep - 1) {
      return 'Submit';
    } else if (currentSubStep.value == totalSubStepsInCurrentStep - 1) {
      return 'Next Step';
    } else {
      return 'Save & Next';
    }
  }

  // Update survey data
  void updateSurveyData(String key, dynamic value) {
    final currentData = Map<String, dynamic>.from(surveyData.value ?? {});
    currentData[key] = value;
    surveyData.value = currentData;
  }

  // Update dropdown values
  void updateGender(String? value) {
    selectedGender.value = value ?? '';
  }

  void updateCategory(String? value) {
    selectedCategory.value = value ?? '';
  }

  void updateState(String? value) {
    selectedState.value = value ?? '';
  }

  void updateSurveyType(String? value) {
    selectedSurveyType.value = value ?? '';
  }

  // API Submit Method
  Future<void> submitSurvey() async {
    try {
      isLoading.value = true;

      // Final validation
      if (!isMainStepCompleted(0) || !isMainStepCompleted(1) || !isMainStepCompleted(2)) {
        Get.snackbar(
          'Incomplete Form',
          'Please complete all required fields',
          backgroundColor: Color(0xFFDC3545),
          colorText: Colors.white,
        );
        return;
      }

      // Save final data
      _saveCurrentSubStepData();

      // Mock API call
      await Future.delayed(Duration(seconds: 2));

      final response = {
        'applicationId': 'SETU${DateTime.now().millisecondsSinceEpoch}',
        'status': 'submitted',
        'timestamp': DateTime.now().toIso8601String(),
        'surveyData': surveyData.value,
      };

      surveyData.value = response;

      Get.snackbar(
        'Success',
        'Your survey has been submitted successfully',
        backgroundColor: Color(0xFF52B788),
        colorText: Colors.white,
      );

      // Navigate to confirmation page
      Get.toNamed('/confirmation');
    } catch (e) {
      errorMessage.value = e.toString();
      Get.snackbar(
        'Error',
        'Something went wrong. Please try again',
        backgroundColor: Color(0xFFDC3545),
        colorText: Colors.white,
      );
    } finally {
      isLoading.value = false;
    }
  }
}





----------------------------------------


// lib/features/survey/views/survey_view.dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:gap/gap.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:google_fonts/google_fonts.dart';
import '../../Constants/color_constant.dart';
import '../controllers/survey_controller.dart';
import 'widgets/survey_step_widget.dart';

class SurveyView extends StatelessWidget {
  const SurveyView({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final controller = Get.put(SurveyController());

    return Scaffold(
      backgroundColor: SetuColors.background,
      appBar: AppBar(
        backgroundColor: SetuColors.primaryGreen,
        elevation: 0,
        title: Text(
          'Setu Survey',
          style: GoogleFonts.poppins(
            color: Colors.white,
            fontSize: 20.sp,
            fontWeight: FontWeight.w600,
          ),
        ),
        leading: IconButton(
          icon: Icon(PhosphorIcons.arrowLeft(PhosphorIconsStyle.regular),
              color: Colors.white),
          onPressed: () => Get.back(),
        ),
      ),
      body: Column(
        children: [
          // Progress Header
          Container(
            color: SetuColors.primaryGreen,
            padding: EdgeInsets.only(bottom: 20.h),
            child: Column(
              children: [
                // Step Progress Indicators
                Obx(() => Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        _buildStepIndicator(
                          controller,
                          0,
                          'Personal\nInfo',
                          PhosphorIcons.user(PhosphorIconsStyle.regular),
                        ),
                        _buildStepIndicator(
                          controller,
                          1,
                          'Survey/CTS\nInformation',
                          PhosphorIcons.clipboard(PhosphorIconsStyle.regular),
                        ),
                        _buildStepIndicator(
                          controller,
                          2,
                          'Survey\nDetails',
                          PhosphorIcons.fileText(PhosphorIconsStyle.regular),
                        ),
                      ],
                    )),

                Gap(16.h),

                // Sub-step Progress Bar
                Obx(() => _buildSubStepProgress(controller)),
              ],
            ),
          ),

          // Main Content
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.all(20.w),
              child: Column(
                children: [
                  // Dynamic Input Container with Navigation
                  Obx(() => _buildInputContainer(controller)),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStepIndicator(
    SurveyController controller,
    int step,
    String title,
    IconData icon,
  ) {
    return Obx(() {
      final isCompleted = controller.isMainStepCompleted(step);
      final isCurrent = controller.currentStep.value == step;
      final color = controller.getStepIndicatorColor(step);

      return GestureDetector(
        onTap: () => controller.goToStep(step),
        child: Column(
          children: [
            Container(
              width: 60.w,
              height: 60.w,
              decoration: BoxDecoration(
                color: color,
                shape: BoxShape.circle,
                border: Border.all(
                  color: color,
                  width: 2,
                ),
              ),
              child: isCompleted
                  ? Icon(
                      PhosphorIcons.check(PhosphorIconsStyle.bold),
                      color: Colors.white,
                      size: 24.w,
                    )
                  : Icon(
                      icon,
                      color: isCurrent ? Colors.black : Colors.white.withOpacity(0.7),
                      size: 24.w,
                    ),
            ),
            Gap(8.h),
            Text(
              title,
              textAlign: TextAlign.center,
              style: GoogleFonts.poppins(
                color: Colors.white,
                fontSize: 12.sp,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      );
    });
  }

  Widget _buildSubStepProgress(SurveyController controller) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 40.w),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Step ${controller.currentSubStep.value + 1} of ${controller.totalSubStepsInCurrentStep}',
                style: GoogleFonts.poppins(
                  color: Colors.white,
                  fontSize: 14.sp,
                  fontWeight: FontWeight.w500,
                ),
              ),
              Text(
                '${(((controller.currentSubStep.value + 1) / controller.totalSubStepsInCurrentStep) * 100).toInt()}%',
                style: GoogleFonts.poppins(
                  color: Colors.white,
                  fontSize: 14.sp,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          Gap(8.h),
          LinearProgressIndicator(
            value: (controller.currentSubStep.value + 1) / controller.totalSubStepsInCurrentStep,
            backgroundColor: Colors.white.withOpacity(0.3),
            valueColor: AlwaysStoppedAnimation<Color>(Colors.orange),
            minHeight: 4.h,
          ),
        ],
      ),
    );
  }

  Widget _buildInputContainer(SurveyController controller) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(24.w),
      decoration: BoxDecoration(
        color: SetuColors.cardBackground,
        borderRadius: BorderRadius.circular(20.r),
        boxShadow: [
          BoxShadow(
            color: SetuColors.primaryGreen.withOpacity(0.1),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
        border: Border.all(
          color: SetuColors.lightGreen.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          // Current Sub-step Content
          SurveyStepWidget(
            currentStep: controller.currentStep.value,
            currentSubStep: controller.currentSubStep.value,
            controller: controller,
          ),

          Gap(32.h),

          // Navigation Buttons
          _buildNavigationButtons(controller),
        ],
      ),
    );
  }

  Widget _buildNavigationButtons(SurveyController controller) {
    return Obx(() => Row(
      children: [
        // Previous Button
        if (controller.currentStep.value > 0 || controller.currentSubStep.value > 0)
          Expanded(
            child: ElevatedButton(
              onPressed: controller.previousSubStep,
              style: ElevatedButton.styleFrom(
                backgroundColor: SetuColors.textSecondary,
                padding: EdgeInsets.symmetric(vertical: 16.h),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.r),
                ),
              ),
              child: Text(
                'Previous',
                style: GoogleFonts.poppins(
                  fontSize: 16.sp,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ),
          ),

        if (controller.currentStep.value > 0 || controller.currentSubStep.value > 0)
          Gap(16.w),

        // Next/Submit Button
        Expanded(
          flex: (controller.currentStep.value == 0 && controller.currentSubStep.value == 0) ? 1 : 1,
          child: ElevatedButton(
            onPressed: controller.isLoading.value ? null : controller.nextSubStep,
            style: ElevatedButton.styleFrom(
              backgroundColor: SetuColors.primaryGreen,
              padding: EdgeInsets.symmetric(vertical: 16.h),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.r),
              ),
            ),
            child: controller.isLoading.value
                ? SizedBox(
                    height: 20.h,
                    width: 20.w,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : Text(
                    controller.nextButtonText,
                    style: GoogleFonts.poppins(
                      fontSize: 16.sp,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                    ),
                  ),
          ),
        ),
      ],
    ));
  }
}






--------------------------



// lib/features/survey/views/widgets/survey_step_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:gap/gap.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';

import '../../../Constants/color_constant.dart';
import '../controllers/survey_controller.dart';

class SurveyStepWidget extends StatefulWidget {
  final int currentStep;
  final int currentSubStep;
  final SurveyController controller;

  const SurveyStepWidget({
    Key? key,
    required this.currentStep,
    required this.currentSubStep,
    required this.controller,
  }) : super(key: key);

  @override
  State<SurveyStepWidget> createState() => _SurveyStepWidgetState();
}

class _SurveyStepWidgetState extends State<SurveyStepWidget> {
  // Image Upload
  final ImagePicker _picker = ImagePicker();
  List<File> selectedImages = [];
  List<File> documentImages = [];

  @override
  Widget build(BuildContext context) {
    switch (widget.currentStep) {
      case 0:
        return _buildPersonalInfoStep();
      case 1:
        return _buildSurveyCTSStep();
      case 2:
        return _buildSurveyInformationStep();
      default:
        return _buildPersonalInfoStep();
    }
  }

  Widget _buildPersonalInfoStep() {
    final subSteps = [
      'name',
      'phone',
      'email',
      'gender',
      'category'
    ];

    final currentField = subSteps[widget.currentSubStep];

    switch (currentField) {
      case 'name':
        return _buildNameInput();
      case 'phone':
        return _buildPhoneInput();
      case 'email':
        return _buildEmailInput();
      case 'gender':
        return _buildGenderInput();
      case 'category':
        return _buildCategoryInput();
      default:
        return _buildNameInput();
    }
  }

  Widget _buildSurveyCTSStep() {
    final subSteps = [
      'address',
      'state',
      'surveyType',
      'documents'
    ];

    final currentField = subSteps[widget.currentSubStep];

    switch (currentField) {
      case 'address':
        return _buildAddressInput();
      case 'state':
        return _buildStateInput();
      case 'surveyType':
        return _buildSurveyTypeInput();
      case 'documents':
        return _buildDocumentUpload();
      default:
        return _buildAddressInput();
    }
  }

  Widget _buildSurveyInformationStep() {
    final subSteps = [
      'remarks',
      'status',
      'images',
      'summary'
    ];

    final currentField = subSteps[widget.currentSubStep];

    switch (currentField) {
      case 'remarks':
        return _buildRemarksInput();
      case 'status':
        return _buildSurveyStatus();
      case 'images':
        return _buildAdditionalImages();
      case 'summary':
        return _buildSurveySummary();
      default:
        return _buildRemarksInput();
    }
  }

  // Personal Info Sub-steps
  Widget _buildNameInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Personal Information', 'What is your full name?'),
        Gap(24.h),
        _buildTextFormField(
          controller: widget.controller.nameController,
          label: 'Full Name',
          hint: 'Enter your complete name',
          icon: PhosphorIcons.user(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.name,
          validator: (value) {
            if (value == null || value.trim().length < 2) {
              return 'Name must be at least 2 characters';
            }
            return null;
          },
        ),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildPhoneInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Contact Information', 'What is your mobile number?'),
        Gap(24.h),
        _buildTextFormField(
          controller: widget.controller.phoneController,
          label: 'Mobile Number',
          hint: 'Enter 10-digit mobile number',
          icon: PhosphorIcons.phone(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.phone,
          maxLength: 10,
          validator: (value) {
            if (value == null || value.length != 10 || !RegExp(r'^[0-9]+$').hasMatch(value)) {
              return 'Phone must be exactly 10 digits';
            }
            return null;
          },
        ),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildEmailInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Contact Information', 'What is your email address?'),
        Gap(24.h),
        _buildTextFormField(
          controller: widget.controller.emailController,
          label: 'Email Address',
          hint: 'Enter your email address',
          icon: PhosphorIcons.envelope(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.emailAddress,
          validator: (value) {
            if (value == null || !RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
              return 'Please enter a valid email address';
            }
            return null;
          },
        ),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildGenderInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Personal Details', 'Select your gender'),
        Gap(24.h),
        Obx(() => _buildDropdownField(
          label: 'Gender',
          value: widget.controller.selectedGender.value,
          items: ['Male', 'Female', 'Other'],
          onChanged: widget.controller.updateGender,
          icon: PhosphorIcons.genderIntersex(PhosphorIconsStyle.regular),
        )),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildCategoryInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Personal Details', 'Select your category'),
        Gap(24.h),
        Obx(() => _buildDropdownField(
          label: 'Category',
          value: widget.controller.selectedCategory.value,
          items: ['General', 'OBC', 'SC', 'ST'],
          onChanged: widget.controller.updateCategory,
          icon: PhosphorIcons.users(PhosphorIconsStyle.regular),
        )),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  // Survey/CTS Sub-steps
  Widget _buildAddressInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Property Information', 'What is the property address?'),
        Gap(24.h),
        _buildTextFormField(
          controller: widget.controller.addressController,
          label: 'Property Address',
          hint: 'Enter complete property address',
          icon: PhosphorIcons.mapPin(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.streetAddress,
          maxLines: 3,
          validator: (value) {
            if (value == null || value.trim().length < 10) {
              return 'Address must be at least 10 characters';
            }
            return null;
          },
        ),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildStateInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Location Details', 'Select your state'),
        Gap(24.h),
        Obx(() => _buildDropdownField(
          label: 'State',
          value: widget.controller.selectedState.value,
          items: ['Maharashtra', 'Gujarat', 'Karnataka', 'Tamil Nadu', 'Rajasthan', 'Other'],
          onChanged: widget.controller.updateState,
          icon: PhosphorIcons.globe(PhosphorIconsStyle.regular),
        )),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildSurveyTypeInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Survey Type', 'Select the type of survey'),
        Gap(24.h),
        Obx(() => _buildDropdownField(
          label: 'Survey Type',
          value: widget.controller.selectedSurveyType.value,
          items: ['CTS Survey', 'Revenue Survey', 'Boundary Survey', 'Topographical Survey'],
          onChanged: widget.controller.updateSurveyType,
          icon: PhosphorIcons.clipboard(PhosphorIconsStyle.regular),
        )),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildDocumentUpload() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Document Upload', 'Upload required documents'),
        Gap(24.h),

        // Document Upload Section
        GestureDetector(
          onTap: _pickDocumentImage,
          child: Container(
            width: double.infinity,
            padding: EdgeInsets.all(24.w),
            decoration: BoxDecoration(
              color: SetuColors.background,
              borderRadius: BorderRadius.circular(12.r),
              border: Border.all(
                color: SetuColors.lightGreen.withOpacity(0.3),
                style: BorderStyle.solid,
              ),
            ),
            child: Column(
              children: [
                Icon(
                  PhosphorIcons.camera(PhosphorIconsStyle.regular),
                  color: SetuColors.primaryGreen,
                  size: 32.w,
                ),
                Gap(8.h),
                Text(
                  'Tap to upload documents',
                  style: GoogleFonts.poppins(
                    fontSize: 14.sp,
                    color: SetuColors.textSecondary,
                  ),
                ),
                if (documentImages.isNotEmpty)
                  Text(
                    '${documentImages.length} document(s) uploaded',
                    style: GoogleFonts.poppins(
                      fontSize: 12.sp,
                      color: SetuColors.primaryGreen,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
              ],
            ),
          ),
        ),

        if (documentImages.isNotEmpty) ...[
          Gap(16.h),
          _buildDocumentPreview(),
        ],

        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  // Survey Information Sub-steps
  Widget _buildRemarksInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Survey Remarks', 'Enter any additional remarks'),
        Gap(24.h),
        _buildTextFormField(
          controller: widget.controller.remarksController,
          label: 'Survey Remarks',
          hint: 'Enter any additional remarks or observations',
          icon: PhosphorIcons.notepad(PhosphorIconsStyle.regular),
          keyboardType: TextInputType.multiline,
          maxLines: 4,
          validator: (value) {
            if (value == null || value.trim().length < 5) {
              return 'Remarks must be at least 5 characters';
            }
            return null;
          },
        ),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildSurveyStatus() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Survey Status', 'Current survey status'),
        Gap(24.h),
        Container(
          padding: EdgeInsets.all(20.w),
          decoration: BoxDecoration(
            color: SetuColors.success.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12.r),
            border: Border.all(color: SetuColors.success.withOpacity(0.3)),
          ),
          child: Row(
            children: [
              Icon(PhosphorIcons.checkCircle(PhosphorIconsStyle.regular),
                   color: SetuColors.success, size: 24.w),
              Gap(16.w),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Survey Status: In Progress',
                      style: GoogleFonts.poppins(
                        fontSize: 16.sp,
                        fontWeight: FontWeight.w600,
                        color: SetuColors.success,
                      ),
                    ),
                    Gap(4.h),
                    Text(
                      'All required information has been collected',
                      style: GoogleFonts.poppins(
                        fontSize: 12.sp,
                        color: SetuColors.textSecondary,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildAdditionalImages() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Additional Images', 'Upload additional survey images'),
        Gap(24.h),

        GestureDetector(
          onTap: _pickMultipleImages,
          child: Container(
            width: double.infinity,
            padding: EdgeInsets.all(24.w),
            decoration: BoxDecoration(
              color: SetuColors.background,
              borderRadius: BorderRadius.circular(12.r),
              border: Border.all(
                color: SetuColors.lightGreen.withOpacity(0.3),
                style: BorderStyle.solid,
              ),
            ),
            child: Column(
              children: [
                Icon(
                  PhosphorIcons.images(PhosphorIconsStyle.regular),
                  color: SetuColors.primaryGreen,
                  size: 32.w,
                ),
                Gap(8.h),
                Text(
                  'Tap to add survey images',
                  style: GoogleFonts.poppins(
                    fontSize: 14.sp,
                    color: SetuColors.textSecondary,
                  ),
                ),
                if (selectedImages.isNotEmpty)
                  Text(
                    '${selectedImages.length} image(s) added',
                    style: GoogleFonts.poppins(
                      fontSize: 12.sp,
                      color: SetuColors.primaryGreen,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
              ],
            ),
          ),
        ),

        if (selectedImages.isNotEmpty) ...[
          Gap(16.h),
          _buildImagePreview(),
        ],

        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  Widget _buildSurveySummary() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStepHeader('Survey Summary', 'Review your information'),
        Gap(24.h),

        Container(
          padding: EdgeInsets.all(20.w),
          decoration: BoxDecoration(
            color: SetuColors.primaryGreen.withOpacity(0.05),
            borderRadius: BorderRadius.circular(16.r),
            border: Border.all(color: SetuColors.primaryGreen.withOpacity(0.2)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Complete Survey Information',
                style: GoogleFonts.poppins(
                  fontSize: 18.sp,
                  fontWeight: FontWeight.w700,
                  color: SetuColors.primaryGreen,
                ),
              ),
              Gap(16.h),

              // Personal Information
              _buildSummarySection('Personal Information', [
                _buildSummaryRow('Name', widget.controller.nameController.text.isNotEmpty
                    ? widget.controller.nameController.text : 'Not provided'),
                _buildSummaryRow('Phone', widget.controller.phoneController.text.isNotEmpty
                    ? widget.controller.phoneController.text : 'Not provided'),
                _buildSummaryRow('Email', widget.controller.emailController.text.isNotEmpty
                    ? widget.controller.emailController.text : 'Not provided'),
                _buildSummaryRow('Gender', widget.controller.selectedGender.value.isNotEmpty
                    ? widget.controller.selectedGender.value : 'Not selected'),
                _buildSummaryRow('Category', widget.controller.selectedCategory.value.isNotEmpty
                    ? widget.controller.selectedCategory.value : 'Not selected'),
              ]),

              Gap(16.h),

              // Survey Information
              _buildSummarySection('Survey Information', [
                _buildSummaryRow('Address', widget.controller.addressController.text.isNotEmpty
                    ? widget.controller.addressController.text : 'Not provided'),
                _buildSummaryRow('State', widget.controller.selectedState.value.isNotEmpty
                    ? widget.controller.selectedState.value : 'Not selected'),
                _buildSummaryRow('Survey Type', widget.controller.selectedSurveyType.value.isNotEmpty
                    ? widget.controller.selectedSurveyType.value : 'Not selected'),
                _buildSummaryRow('Documents', '${documentImages.length} uploaded'),
                _buildSummaryRow('Additional Images', '${selectedImages.length} uploaded'),
                _buildSummaryRow('Remarks', widget.controller.remarksController.text.isNotEmpty
                    ? widget.controller.remarksController.text : 'Not provided'),
              ]),
            ],
          ),
        ),

        Gap(32.h),
        _buildNavigationButtons(),
      ],
    );
  }

  // Helper Widgets
  Widget _buildStepHeader(String title, String subtitle) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: GoogleFonts.poppins(
            fontSize: 22.sp,
            fontWeight: FontWeight.w700,
            color: SetuColors.primaryGreen,
          ),
        ),
        Gap(6.h),
        Text(
          subtitle,
          style: GoogleFonts.poppins(
            fontSize: 14.sp,
            color: SetuColors.textSecondary,
            fontWeight: FontWeight.w400,
          ),
        ),
      ],
    );
  }

  Widget _buildTextFormField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    TextInputType keyboardType = TextInputType.text,
    int maxLines = 1,
    int? maxLength,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: GoogleFonts.poppins(
            fontSize: 16.sp,
            fontWeight: FontWeight.w600,
            color: SetuColors.textPrimary,
          ),
        ),
        Gap(8.h),
        TextFormField(
          controller: controller,
          keyboardType: keyboardType,
          maxLines: maxLines,
          maxLength: maxLength,
          style: GoogleFonts.poppins(fontSize: 16.sp),
          decoration: InputDecoration(
            hintText: hint,
            prefixIcon: Icon(icon, color: SetuColors.primaryGreen, size: 20.w),
            filled: true,
            fillColor: SetuColors.background,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.lightGreen.withOpacity(0.3)),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.lightGreen.withOpacity(0.3)),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.primaryGreen, width: 2),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.error, width: 1),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.error, width: 2),
            ),
            contentPadding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 16.h),
          ),
        ),
      ],
    );
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required ValueChanged<String?> onChanged,
    required IconData icon,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: GoogleFonts.poppins(
            fontSize: 16.sp,
            fontWeight: FontWeight.w600,
            color: SetuColors.textPrimary,
          ),
        ),
        Gap(8.h),
        DropdownButtonFormField<String>(
          value: value.isEmpty ? null : value,
          items: items.map((item) => DropdownMenuItem(
            value: item,
            child: Text(item, style: GoogleFonts.poppins(fontSize: 16.sp)),
          )).toList(),
          onChanged: onChanged,
          decoration: InputDecoration(
            prefixIcon: Icon(icon, color: SetuColors.primaryGreen, size: 20.w),
            filled: true,
            fillColor: SetuColors.background,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.lightGreen.withOpacity(0.3)),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.lightGreen.withOpacity(0.3)),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12.r),
              borderSide: BorderSide(color: SetuColors.primaryGreen, width: 2),
            ),
            contentPadding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 16.h),
          ),
        ),
      ],
    );
  }

  Widget _buildNavigationButtons() {
    return Obx(() => Row(
      children: [
        // Previous Button
        if (widget.controller.currentStep.value > 0 || widget.controller.currentSubStep.value > 0)
          Expanded(
            child: ElevatedButton(
              onPressed: widget.controller.previousSubStep,
              style: ElevatedButton.styleFrom(
                backgroundColor: SetuColors.textSecondary,
                padding: EdgeInsets.symmetric(vertical: 16.h),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.r),
                ),
              ),
              child: Text(
                'Previous',
                style: GoogleFonts.poppins(
                  fontSize: 16.sp,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ),
          ),

        if (widget.controller.currentStep.value > 0 || widget.controller.currentSubStep.value > 0)
          Gap(16.w),

        // Next/Submit Button
        Expanded(
          flex: (widget.controller.currentStep.value == 0 && widget.controller.currentSubStep.value == 0) ? 1 : 1,
          child: ElevatedButton(
            onPressed: widget.controller.isLoading.value ? null : widget.controller.nextSubStep,
            style: ElevatedButton.styleFrom(
              backgroundColor: SetuColors.primaryGreen,
              padding: EdgeInsets.symmetric(vertical: 16.h),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.r),
              ),
            ),
            child: widget.controller.isLoading.value
                ? SizedBox(
                    height: 20.h,
                    width: 20.w,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : Text(
                    widget.controller.nextButtonText,
                    style: GoogleFonts.poppins(
                      fontSize: 16.sp,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                    ),
                  ),
          ),
        ),
      ],
    ));
  }

  Widget _buildSummarySection(String title, List<Widget> rows) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: GoogleFonts.poppins(
            fontSize: 16.sp,
            fontWeight: FontWeight.w600,
            color: SetuColors.primaryGreen,
          ),
        ),
        Gap(8.h),
        ...rows,
      ],
    );
  }

  Widget _buildSummaryRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.only(bottom: 6.h),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120.w,
            child: Text(
              '$label:',
              style: GoogleFonts.poppins(
                fontSize: 14.sp,
                fontWeight: FontWeight.w500,
                color: SetuColors.textPrimary,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: GoogleFonts.poppins(
                fontSize: 14.sp,
                color: SetuColors.textSecondary,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImagePreview() {
    return Container(
      height: 100.h,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: selectedImages.length,
        itemBuilder: (context, index) {
          return Container(
            margin: EdgeInsets.only(right: 12.w),
            width: 100.w,
            height: 100.h,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12.r),
              image: DecorationImage(
                image: FileImage(selectedImages[index]),
                fit: BoxFit.cover,
              ),
            ),
            child: Stack(
              children: [
                Positioned(
                  top: 4.h,
                  right: 4.w,
                  child: GestureDetector(
                    onTap: () => _removeImage(index),
                    child: Container(
                      padding: EdgeInsets.all(4.w),
                      decoration: BoxDecoration(
                        color: SetuColors.error,
                        shape: BoxShape.circle,
                      ),
                      child: Icon(
                        PhosphorIcons.x(PhosphorIconsStyle.regular),
                        color: Colors.white,
                        size: 12.w,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

 Widget _buildDocumentPreview() {
   return Container(
     height: 100.h,
     child: ListView.builder(
       scrollDirection: Axis.horizontal,
       itemCount: documentImages.length,
       itemBuilder: (context, index) {
         return Container(
           margin: EdgeInsets.only(right: 12.w),
           width: 100.w,
           height: 100.h,
           decoration: BoxDecoration(
             borderRadius: BorderRadius.circular(12.r),
             image: DecorationImage(
               image: FileImage(documentImages[index]),
               fit: BoxFit.cover,
             ),
           ),
           child: Stack(
             children: [
               // Document overlay
               Container(
                 decoration: BoxDecoration(
                   borderRadius: BorderRadius.circular(12.r),
                   color: Colors.black.withOpacity(0.3),
                 ),
                 child: Center(
                   child: Icon(
                     PhosphorIcons.file(PhosphorIconsStyle.bold),
                     color: Colors.white,
                     size: 24.w,
                   ),
                 ),
               ),
               Positioned(
                 top: 4.h,
                 right: 4.w,
                 child: GestureDetector(
                   onTap: () => _removeDocumentImage(index),
                   child: Container(
                     padding: EdgeInsets.all(4.w),
                     decoration: BoxDecoration(
                       color: SetuColors.error,
                       shape: BoxShape.circle,
                     ),
                     child: Icon(
                       PhosphorIcons.x(PhosphorIconsStyle.regular),
                       color: Colors.white,
                       size: 12.w,
                     ),
                   ),
                 ),
               ),
             ],
           ),
         );
       },
     ),
   );
 }