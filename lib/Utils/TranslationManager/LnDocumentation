# Flutter GetX Translation Service Documentation

A comprehensive, production-ready translation service for Flutter applications using GetX state management with caching, offline support, and automatic text translation capabilities.

## Table of Contents

1. [Features](#features)
2. [Installation](#installation)
3. [Quick Start](#quick-start)
4. [Core Components](#core-components)
5. [Usage Examples](#usage-examples)
6. [API Reference](#api-reference)
7. [Advanced Configuration](#advanced-configuration)
8. [Best Practices](#best-practices)
9. [Troubleshooting](#troubleshooting)

## Features

### 🚀 Core Features
- **Automatic Translation**: Real-time text translation using Google Translate API
- **Multi-level Caching**: Memory + persistent cache for optimal performance
- **Offline Support**: Fallback to cached translations when offline
- **GetX Integration**: Reactive state management with GetX
- **Batch Translation**: Efficient batch processing for multiple texts
- **Smart Caching**: Intelligent cache management with expiry and size limits
- **Error Handling**: Comprehensive error handling with fallbacks
- **Debounced Requests**: Prevents excessive API calls
- **Language Management**: Complete language switching functionality

### 🎯 Widget Features
- **TranslatableText**: Drop-in replacement for Text widget
- **TranslatableRichText**: Rich text support with translation
- **Loading States**: Customizable loading indicators
- **Error Fallbacks**: Graceful error handling with original text fallback

## Installation

### Dependencies

Add these dependencies to your `pubspec.yaml`:

```yaml
dependencies:
  flutter:
    sdk: flutter
  get: ^4.6.6
  shared_preferences: ^2.2.2
  connectivity_plus: ^5.0.2
  translator: ^0.1.7

dev_dependencies:
  flutter_test:
    sdk: flutter
```

### File Structure

```
lib/
├── utils/
│   └── translation_manager/
│       ├── translation_service.dart
│       ├── translatable_text.dart
│       └── translation_controller.dart
└── main.dart
```

## Quick Start

### 1. Initialize in main.dart

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize GetX dependency injection
  Get.put(TranslationController());

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      title: 'My App',
      home: HomeScreen(),
    );
  }
}
```

### 2. Basic Usage

```dart
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: TranslatableText('Welcome'),
        actions: [LanguageSelector()],
      ),
      body: Column(
        children: [
          TranslatableText('Hello, World!'),
          TranslatableText(
            'This text will be translated automatically',
            style: TextStyle(fontSize: 16),
          ),
        ],
      ),
    );
  }
}
```

## Core Components

### 1. TranslationService
Core service handling translation logic, caching, and API communication.

### 2. TranslationController (GetX)
GetX controller managing reactive state and providing easy-to-use methods.

### 3. TranslatableText Widget
Drop-in replacement for Text widget with automatic translation.

### 4. Language Management
Complete language switching with persistent storage.

## Usage Examples

### Basic Text Translation

```dart
-------------Specify the source language of the text.

GetTranslatableText(
  'Hello, welcome to the app!',
  targetLanguage: 'es', // Spanish
  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
)

---------------Display text without translating it.
GetTranslatableText(
  'This text will not be translated.',
  enableTranslation: false,
  style: TextStyle(fontSize: 18),
)




// Simple text translation
TranslatableText('Hello World')

// With styling
TranslatableText(
  'Welcome to our app',
  style: TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.bold,
  ),
)

// Disable translation for specific text
TranslatableText(
  'Brand Name', // Won't be translated
  enableTranslation: false,
)
```

### Dynamic Values Translation

```dart
class UserProfileView extends StatelessWidget {
  final User user;

  UserProfileView({required this.user});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Translate dynamic user data
        TranslatableText(user.name), // User name
        TranslatableText(user.bio), // User bio
        TranslatableText(user.profession), // User profession

        // Template with dynamic values
        TranslatableText('Welcome, ${user.name}!'),

        // Status messages
        TranslatableText(
          user.isOnline ? 'User is online' : 'User is offline'
        ),
      ],
    );
  }
}
```

### JSON Data Translation

```dart
class ProductController extends GetxController {
  final products = <Product>[].obs;
  final translationController = Get.find<TranslationController>();

  void loadProducts() async {
    // Load JSON data
    final jsonData = await ApiService.getProducts();
    final productList = jsonData.map((json) => Product.fromJson(json)).toList();

    // Preload translations for all product data
    await preloadProductTranslations(productList);

    products.value = productList;
  }

  Future<void> preloadProductTranslations(List<Product> products) async {
    final textsToTranslate = <String>[];

    // Collect all translatable texts from JSON
    for (final product in products) {
      textsToTranslate.addAll([
        product.name,
        product.description,
        product.category,
        ...product.features, // Array values
        ...product.specifications.values, // Map values
      ]);
    }

    // Batch translate all texts
    await translationController.translateBatch(textsToTranslate);
  }
}

// Usage in widget
class ProductCard extends StatelessWidget {
  final Product product;

  ProductCard({required this.product});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Column(
        children: [
          TranslatableText(product.name), // JSON field
          TranslatableText(product.description), // JSON field
          TranslatableText(product.category), // JSON field

          // Array values from JSON
          ...product.features.map((feature) =>
            TranslatableText(feature)
          ),
        ],
      ),
    );
  }
}
```

### API Response Translation

```dart
class NewsController extends GetxController {
  final articles = <Article>[].obs;
  final translationController = Get.find<TranslationController>();

  void fetchNews() async {
    try {
      // Fetch from API
      final response = await http.get(Uri.parse('https://api.news.com/articles'));
      final data = jsonDecode(response.body);

      // Parse articles
      final articleList = (data['articles'] as List)
          .map((json) => Article.fromJson(json))
          .toList();

      // Preload translations for API response
      await preloadApiTranslations(articleList);

      articles.value = articleList;
    } catch (e) {
      Get.snackbar('Error', 'Failed to load news');
    }
  }

  Future<void> preloadApiTranslations(List<Article> articles) async {
    final textsToTranslate = <String>[];

    for (final article in articles) {
      textsToTranslate.addAll([
        article.title,
        article.summary,
        article.content,
        article.category,
        article.source.name,
        ...article.tags, // API array field
      ]);
    }

    // Batch translate API response data
    await translationController.translateBatch(textsToTranslate);
  }
}
```

### Form Data Translation

```dart
class ContactFormController extends GetxController {
  final formKey = GlobalKey<FormState>();
  final nameController = TextEditingController();
  final messageController = TextEditingController();

  final translationController = Get.find<TranslationController>();

  @override
  void onInit() {
    super.onInit();
    preloadFormTexts();
  }

  void preloadFormTexts() async {
    // Preload common form texts
    await translationController.translateBatch([
      'Name',
      'Email',
      'Message',
      'Send Message',
      'Required field',
      'Please enter your name',
      'Please enter your message',
      'Message sent successfully',
      'Failed to send message',
    ]);
  }

  void submitForm() async {
    if (formKey.currentState!.validate()) {
      try {
        // Translate user input before sending
        final translatedMessage = await translationController
            .translateText(messageController.text, targetLanguage: 'en');

        await ApiService.sendMessage(
          name: nameController.text,
          message: translatedMessage,
        );

        Get.snackbar(
          await translationController.translateText('Success'),
          await translationController.translateText('Message sent successfully'),
        );
      } catch (e) {
        Get.snackbar(
          await translationController.translateText('Error'),
          await translationController.translateText('Failed to send message'),
        );
      }
    }
  }
}

class ContactFormView extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final controller = Get.put(ContactFormController());

    return Scaffold(
      appBar: AppBar(
        title: TranslatableText('Contact Us'),
      ),
      body: Form(
        key: controller.formKey,
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            children: [
              TextFormField(
                controller: controller.nameController,
                decoration: InputDecoration(
                  labelText: '', // Use TranslatableText for labels
                  hintText: '', // Use TranslatableText for hints
                ),
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return Get.find<TranslationController>()
                        .translateText('Please enter your name');
                  }
                  return null;
                },
              ),
              // ... other form fields
            ],
          ),
        ),
      ),
    );
  }
}
```

### Language Switching

```dart
class LanguageSelector extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GetBuilder<TranslationController>(
      builder: (controller) {
        return PopupMenuButton<Language>(
          icon: Row(
            children: [
              Text(controller.currentLanguage?.flag ?? '🌐'),
              Icon(Icons.arrow_drop_down),
            ],
          ),
          onSelected: (language) async {
            // Change language and preload common translations
            await controller.changeLanguage(language);
          },
          itemBuilder: (context) {
            return SupportedLanguages.all.map((language) {
              return PopupMenuItem<Language>(
                value: language,
                child: Row(
                  children: [
                    Text(language.flag),
                    SizedBox(width: 8),
                    Text(language.name),
                    if (controller.currentLanguage?.code == language.code)
                      Icon(Icons.check, color: Colors.green),
                  ],
                ),
              );
            }).toList();
          },
        );
      },
    );
  }
}
```

### Advanced Usage Patterns

#### Custom Loading Widget

```dart
TranslatableText(
  'Loading content...',
  loadingWidget: Shimmer.fromColors(
    baseColor: Colors.grey[300]!,
    highlightColor: Colors.grey[100]!,
    child: Container(
      height: 20,
      width: 100,
      color: Colors.white,
    ),
  ),
)
```

#### Conditional Translation

```dart
class ConditionalTranslationExample extends StatelessWidget {
  final bool isUserContent;
  final String text;

  ConditionalTranslationExample({
    required this.isUserContent,
    required this.text,
  });

  @override
  Widget build(BuildContext context) {
    return TranslatableText(
      text,
      // Don't translate user-generated content
      enableTranslation: !isUserContent,
    );
  }
}
```

#### Batch Operations

```dart
class BatchTranslationExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final controller = Get.find<TranslationController>();

    return ElevatedButton(
      onPressed: () async {
        // Translate multiple texts at once
        final translations = await controller.translateBatch([
          'Welcome',
          'Settings',
          'Profile',
          'Logout',
          'Help',
        ]);

        // Use translated texts
        translations.forEach((original, translated) {
          print('$original -> $translated');
        });
      },
      child: TranslatableText('Batch Translate'),
    );
  }
}
```

## API Reference

### TranslationController Methods

#### `changeLanguage(Language language)`
Changes the current language and preloads common translations.

```dart
await translationController.changeLanguage(
  SupportedLanguages.findByCode('hi')!
);
```

#### `translateText(String text, {String? targetLanguage})`
Translates a single text string.

```dart
final translated = await translationController.translateText(
  'Hello World',
  targetLanguage: 'hi', // Optional: override current language
);
```

#### `translateBatch(List<String> texts)`
Translates multiple texts efficiently.

```dart
final results = await translationController.translateBatch([
  'Text 1',
  'Text 2',
  'Text 3',
]);
```

#### `clearCache()`
Clears all translation caches.

```dart
translationController.clearCache();
```

#### `getCacheStats()`
Returns cache statistics.

```dart
final stats = await translationController.getCacheStats();
print('Memory cache: ${stats['memoryCache']}');
print('Persistent cache: ${stats['persistentCache']}');
```

### TranslationService Configuration

```dart
// Custom configuration
await TranslationService.instance.initialize(
  config: TranslationConfig(
    cacheExpiry: Duration(days: 30), // Cache expiry time
    maxCacheSize: 2000, // Maximum cache entries
    requestTimeout: Duration(seconds: 15), // API timeout
    maxRetries: 5, // Retry attempts
    retryDelay: Duration(seconds: 1), // Delay between retries
    enableDebugLogs: true, // Debug logging
  ),
);
```

### TranslatableText Properties

```dart
TranslatableText(
  'Text to translate',
  // Standard Text properties
  style: TextStyle(),
  textAlign: TextAlign.center,
  maxLines: 2,
  overflow: TextOverflow.ellipsis,

  // Translation-specific properties
  enableTranslation: true, // Enable/disable translation
  loadingWidget: CircularProgressIndicator(), // Custom loading widget
)
```

## Advanced Configuration

### Custom Language Support

```dart
class CustomLanguages {
  static const List<Language> supported = [
    Language(name: 'English', code: 'en', flag: '🇺🇸', nativeName: 'English'),
    Language(name: 'Hindi', code: 'hi', flag: '🇮🇳', nativeName: 'हिंदी'),
    Language(name: 'Spanish', code: 'es', flag: '🇪🇸', nativeName: 'Español'),
    Language(name: 'French', code: 'fr', flag: '🇫🇷', nativeName: 'Français'),
    Language(name: 'German', code: 'de', flag: '🇩🇪', nativeName: 'Deutsch'),
    Language(name: 'Chinese', code: 'zh', flag: '🇨🇳', nativeName: '中文'),
    Language(name: 'Japanese', code: 'ja', flag: '🇯🇵', nativeName: '日本語'),
    Language(name: 'Arabic', code: 'ar', flag: '🇸🇦', nativeName: 'العربية'),
  ];
}
```

### Performance Optimization

```dart
class OptimizedTranslationController extends TranslationController {
  @override
  void onInit() {
    super.onInit();

    // Preload critical translations
    ever(_currentLanguage, (Language? language) {
      if (language != null) {
        _preloadCriticalTranslations(language.code);
      }
    });
  }

  Future<void> _preloadCriticalTranslations(String languageCode) async {
    // Preload common UI elements
    await translateBatch([
      'Loading...',
      'Error',
      'Success',
      'Cancel',
      'OK',
      'Yes',
      'No',
      'Save',
      'Delete',
      'Edit',
      'Search',
      'Settings',
      'Profile',
      'Home',
      'Back',
      'Next',
      'Previous',
      'Submit',
      'Confirm',
      'Retry',
    ]);
  }
}
```

### Error Handling Strategy

```dart
class RobustTranslationController extends TranslationController {
  @override
  Future<String> translateText(String text, {String? targetLanguage}) async {
    try {
      return await super.translateText(text, targetLanguage: targetLanguage);
    } catch (e) {
      // Log error for analytics
      _logTranslationError(text, targetLanguage, e);

      // Fallback strategies
      return _getTranslationFallback(text, targetLanguage);
    }
  }

  String _getTranslationFallback(String text, String? targetLanguage) {
    // Strategy 1: Check local phrase dictionary
    final localTranslation = _getLocalTranslation(text, targetLanguage);
    if (localTranslation != null) return localTranslation;

    // Strategy 2: Return original text
    return text;
  }

  String? _getLocalTranslation(String text, String? targetLanguage) {
    // Implement local phrase dictionary lookup
    final phrases = {
      'en_hi': {
        'Hello': 'नमस्ते',
        'Welcome': 'स्वागत है',
        'Thank you': 'धन्यवाद',
      },
    };

    final key = 'en_${targetLanguage ?? currentLanguage?.code}';
    return phrases[key]?[text];
  }

  void _logTranslationError(String text, String? targetLanguage, dynamic error) {
    // Implement error logging
    debugPrint('Translation Error: $text -> $targetLanguage: $error');
  }
}
```

## Best Practices

### 1. Initialization

```dart
// ✅ Good: Initialize early in main()
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  Get.put(TranslationController());
  runApp(MyApp());
}

// ❌ Bad: Initialize in widget build methods
class BadExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    Get.put(TranslationController()); // Don't do this
    return Container();
  }
}
```

### 2. Batch Translations

```dart
// ✅ Good: Batch translate related texts
Future<void> loadScreenData() async {
  await translationController.translateBatch([
    'Screen Title',
    'Button Text',
    'Description',
    'Error Message',
  ]);

  // Then update UI
}

// ❌ Bad: Individual translation calls
Future<void> badLoadScreenData() async {
  await translationController.translateText('Screen Title');
  await translationController.translateText('Button Text');
  await translationController.translateText('Description');
  // This creates multiple API calls
}
```

### 3. Caching Strategy

```dart
// ✅ Good: Preload common translations
class AppController extends GetxController {
  @override
  void onInit() {
    super.onInit();
    _preloadCommonTranslations();
  }

  Future<void> _preloadCommonTranslations() async {
    await Get.find<TranslationController>().translateBatch([
      // Navigation
      'Home', 'Settings', 'Profile', 'Search',
      // Actions
      'Save', 'Cancel', 'Delete', 'Edit',
      // States
      'Loading', 'Error', 'Success', 'Empty',
      // Common phrases
      'Welcome', 'Thank you', 'Please wait',
    ]);
  }
}
```

### 4. Performance Optimization

```dart
// ✅ Good: Disable translation for user content
TranslatableText(
  userComment.text, // User-generated content
  enableTranslation: false, // Don't translate user content
)

// ✅ Good: Use debouncing for search
class SearchController extends GetxController {
  final searchResults = <SearchResult>[].obs;
  Timer? _debounceTimer;

  void searchWithTranslation(String query) {
    _debounceTimer?.cancel();
    _debounceTimer = Timer(Duration(milliseconds: 500), () async {
      final translatedQuery = await translationController.translateText(query);
      final results = await ApiService.search(translatedQuery);
      searchResults.value = results;
    });
  }
}
```

### 5. Error Handling

```dart
// ✅ Good: Graceful error handling
class SafeTranslationExample extends StatelessWidget {
  final String text;

  SafeTranslationExample({required this.text});

  @override
  Widget build(BuildContext context) {
    return TranslatableText(
      text,
      // Original text is shown if translation fails
      enableTranslation: true,
    );
  }
}
```

## Troubleshooting

### Common Issues

#### 1. Translation Not Working

**Problem**: TranslatableText shows original text instead of translated text.

**Solutions**:
- Check if TranslationController is properly initialized
- Verify internet connectivity
- Check if target language is different from source language
- Enable debug logs to see translation attempts

```dart
// Debug translation issues
final stats = await translationController.getCacheStats();
print('Translation stats: $stats');

// Check current language
print('Current language: ${translationController.currentLanguage?.code}');
```

#### 2. Performance Issues

**Problem**: App becomes slow when using many TranslatableText widgets.

**Solutions**:
- Use batch translation for screen data
- Preload common translations
- Implement proper caching strategy
- Use debouncing for rapid text changes

#### 3. Cache Issues

**Problem**: Translations not persisting or cache growing too large.

**Solutions**:
```dart
// Clear cache if corrupted
translationController.clearCache();

// Check cache size
final stats = await translationController.getCacheStats();
if (stats['persistentCache'] > 1000) {
  translationController.clearCache();
}
```

#### 4. API Rate Limiting

**Problem**: Too many API requests causing rate limiting.

**Solutions**:
- Implement proper batching
- Increase debounce delays
- Use caching effectively
- Preload translations

### Debug Mode

Enable comprehensive logging:

```dart
await TranslationService.instance.initialize(
  config: TranslationConfig(
    enableDebugLogs: true,
  ),
);
```

### Testing

```dart
// Unit test example
testWidgets('TranslatableText displays translated text', (tester) async {
  // Initialize translation controller
  Get.put(TranslationController());

  await tester.pumpWidget(
    GetMaterialApp(
      home: Scaffold(
        body: TranslatableText('Hello'),
      ),
    ),
  );

  // Wait for translation
  await tester.pumpAndSettle();

  // Verify translated text appears
  expect(find.text('नमस्ते'), findsOneWidget);
});
```

---

## Conclusion

This translation service provides a complete solution for Flutter apps requiring multi-language support. It combines the power of GetX state management with intelligent caching and robust error handling to deliver smooth translation experiences.

For more advanced use cases or custom implementations, refer to the source code and extend the base classes as needed.