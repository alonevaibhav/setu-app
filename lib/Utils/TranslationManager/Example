import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../Utils/TranslationManager/translation_service.dart';
import 'Controller/get_translation_controller/get_text_form.dart';
import 'Controller/get_translation_controller/get_translation_controller.dart';

// Modified ProductController to work with TranslationController
class ProductController extends GetxController {
  // Observable lists
  final RxList<Product> products = <Product>[].obs;
  final RxBool isLoading = false.obs;
  final RxString errorMessage = ''.obs;

  // Get the translation controller instance
  TranslationController get translationController => TranslationController.instance;

  @override
  void onInit() {
    super.onInit();
    loadProducts();
  }

  void loadProducts() {
    try {
      isLoading.value = true;
      errorMessage.value = '';

      // Sample JSON data
      final jsonData = [
        {
          "id": 1,
          "name": "Wireless Headphones",
          "description": "Premium quality wireless headphones with noise cancellation",
          "category": "Electronics",
          "price": 299.99,
          "features": ["Bluetooth 5.0", "Noise Cancellation", "30-hour battery", "Quick charge"]
        },
        {
          "id": 2,
          "name": "Smart Watch",
          "description": "Advanced fitness tracking smartwatch with heart rate monitor",
          "category": "Wearables",
          "price": 199.99,
          "features": ["Heart Rate Monitor", "GPS Tracking", "Water Resistant", "Sleep Tracking"]
        }
      ];

      products.value = jsonData.map((json) => Product.fromJson(json)).toList();
    } catch (e) {
      errorMessage.value = 'Failed to load products: $e';
    } finally {
      isLoading.value = false;
    }
  }



  // Format price with currency
  String formatPrice(double price) {
    return '\$${price.toStringAsFixed(2)}';
  }
}

class ProductView extends StatelessWidget {
  const ProductView({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final controller = Get.put(ProductController());
    final tcontroller = Get.put(TranslationController());

    return Scaffold(
      appBar: AppBar(
        title: GetTranslatableText(
          'Products',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.blue.shade600,
        foregroundColor: Colors.white,
        elevation: 2,
        actions: [
          // Use the existing LanguageSelector
          LanguageSelector(),
          SizedBox(width: 16),
        ],
      ),
      body: Column(
        children: [
          // Loading indicator
          Obx(() {
            if (controller.isLoading.value || controller.translationController.isLoading) {
              return Padding(
                padding: EdgeInsets.all(16.0),
                child: Center(
                  child: Column(
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(height: 16),
                      GetTranslatableText('Loading products...'),
                    ],
                  ),
                ),
              );
            }
            return SizedBox.shrink();
          }),

          // Error handling
          Obx(() {
            if (controller.errorMessage.value.isNotEmpty) {
              return Padding(
                padding: const EdgeInsets.all(16.0),
                child: Center(
                  child: Column(
                    children: [
                      Icon(
                        Icons.error_outline,
                        size: 64,
                        color: Colors.red.shade400,
                      ),
                      const SizedBox(height: 16),
                      GetTranslatableText(
                        controller.errorMessage.value,
                      ),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: controller.loadProducts,
                        child: const GetTranslatableText('Retry'),
                      ),
                    ],
                  ),
                ),
              );
            }
            return const SizedBox.shrink();
          }),

          // Products list
          Expanded(
            child: Obx(() {
              if (controller.products.isEmpty && !controller.isLoading.value) {
                return const Center(
                  child: GetTranslatableText('No products available'),
                );
              }

              return RefreshIndicator(
                onRefresh: () async {
                  controller.loadProducts();
                },
                child: ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: controller.products.length,
                  itemBuilder: (context, index) {
                    final product = controller.products[index];
                    return _buildProductCard(product, controller);
                  },
                ),
              );
            }),
          ),
        ],
      ),
    );
  }

  Widget _buildProductCard(Product product, ProductController controller) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Product Header
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Expanded(
                      child: GetTranslatableText(
                        product.name,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade100,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: GetTranslatableText(
                        product.category,
                        style: TextStyle(
                          color: Colors.blue.shade700,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                    const Spacer(),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.green.shade100,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text( // Price doesn't need translation
                        controller.formatPrice(product.price),
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.green.shade700,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),

            const SizedBox(height: 12),

            // Product Description
            GetTranslatableText(
              product.description,
              style: TextStyle(
                color: Colors.grey.shade700,
                height: 1.4,
              ),
            ),

            const SizedBox(height: 16),

            // Features Section
            const GetTranslatableText(
              'Features',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),

            // Features List
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: product.features.map((feature) {
                return Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.grey.shade300,
                    ),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                        Icons.check_circle,
                        size: 16,
                        color: Colors.green.shade600,
                      ),
                      const SizedBox(width: 4),
                      Flexible(
                        child: GetTranslatableText(
                          feature,
                          style: TextStyle(
                            color: Colors.grey.shade700,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }
}



// Updated main app
class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      title: 'Product Catalog',
      // initialBinding: AppBinding(), // Important: Add this binding
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
        appBarTheme: AppBarTheme(
          centerTitle: true,
          backgroundColor: Colors.blue.shade600,
          foregroundColor: Colors.white,
        ),
      ),
      home: const ProductView(),
      debugShowCheckedModeBanner: false,
    );
  }
}


// / Language Selector Widget

// Fix 6: Update LanguageSelector to ensure proper English selection
class LanguageSelector extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GetBuilder<TranslationController>(
      builder: (controller) {
        return PopupMenuButton<Language>(
          icon: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(controller.currentLanguage?.flag ?? '🌐'),
              SizedBox(width: 4),
              Text(controller.currentLanguage?.code.toUpperCase() ?? 'EN'),
              Icon(Icons.arrow_drop_down, size: 16),
            ],
          ),
          onSelected: (Language language) async {
            // FIXED: Ensure English selection works properly
            await controller.changeLanguage(language);
          },
          itemBuilder: (context) {
            return SupportedLanguages.all.map((language) {
              final isSelected = controller.currentLanguage?.code == language.code;
              return PopupMenuItem<Language>(
                value: language,
                child: Row(
                  children: [
                    Text(language.flag),
                    SizedBox(width: 8),
                    Expanded(child: Text(language.name)),
                    if (isSelected)
                      Icon(Icons.check, color: Colors.green, size: 16),
                  ],
                ),
              );
            }).toList();
          },
        );
      },
    );
  }
}
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}


// Keep your existing Product model
class Product {
  final int id;
  final String name;
  final String description;
  final String category;
  final double price;
  final List<String> features;

  Product({
    required this.id,
    required this.name,
    required this.description,
    required this.category,
    required this.price,
    required this.features,
  });

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(
      id: json['id'],
      name: json['name'],
      description: json['description'],
      category: json['category'],
      price: json['price'].toDouble(),
      features: List<String>.from(json['features']),
    );
  }
}